<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>红纸</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.zhz.io/"/>
  <updated>2018-02-11T09:58:09.000Z</updated>
  <id>http://www.zhz.io/</id>
  
  <author>
    <name>HongZhi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2017傻瓜式总结</title>
    <link href="http://www.zhz.io/2018/01/06/2017%E5%82%BB%E7%93%9C%E5%BC%8F%E6%80%BB%E7%BB%93/"/>
    <id>http://www.zhz.io/2018/01/06/2017傻瓜式总结/</id>
    <published>2018-01-06T07:54:09.000Z</published>
    <updated>2018-02-11T09:58:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>OK~工作一年了哈，博客一直没有管，组内事情太多（借口，太懒），虽然写了一堆的文章，但是基本上都是在组内发布了。对外么，部分受限于公司协议之类的，部分是暂时觉得水平有限（反正也没什么人看么）。</p><h2 id="回顾2016年立的Flag-amp-Bad"><a href="#回顾2016年立的Flag-amp-Bad" class="headerlink" title="回顾2016年立的Flag &amp; Bad"></a>回顾2016年立的Flag &amp; Bad</h2><ul><li>明确自己的人生目标<br>在这一点上，应该考虑了很久才对，但是一直没有给自己一个明确的答案。<br>但是应该有了一系列的目标。<ol><li>财务自由？不不不，精神自由。在40岁以后能够达到精神自由，不再受限于生活中的种种因素的干扰。毕竟精神自由取决于个人，我觉得我是一个比较感性的人，钱虽然是越多越好，但是钱么，我觉得够用就好。过上舒舒服服的小日子。但是在此之前就必须要好好努力才可以</li><li>在技术上有所突破，为后来人留下一些真正有用的东西，再者是提高一些知名度。2018，一个月至少一篇以上有含量的技术分享，为之努力吧，也只能这么说一说了。</li></ol></li><li>去一次日本<br>没去，其他地方倒是去了好几个，对我个人来说也是很棒的体验。</li><li>能够从容的应对各种事情<br>在这个方面，我觉得个人做的还可以，练就了’Pocker Face’，只不过还有待加强心理承受能力吧，主要还是靠这个，心理承受能力好了才行。不然应对一些事情的时候，会不知所措。</li></ul><a id="more"></a><h2 id="无痕埋点-amp-AOP"><a href="#无痕埋点-amp-AOP" class="headerlink" title="无痕埋点 &amp; AOP"></a>无痕埋点 &amp; AOP</h2><p>做好了，但是产品没有启用（怪我咯？）。17年年初的时候，一直都在做这方面的事情，研究各种大公司的方案，终于耗时3个月的修修整整，出了一个完整的方案，但是埋点组说维护成本太大了（项目启动时候，已经明确提出说维护成本会很大，大致分支成本出处，与最后一致。）。哎，不说这些伤心事，虽然没有启用，但是对于我个人而言还是有很大的收获的，例如AOP相关把Aspects完全给弄完了一遍，梳理了行业内的所有无痕埋点的方案。基本每个方案都进行了一个尝试，留下了很多产物，对于自己有了一个很大的帮助。从中的Aspects库后来改了改，也用到了AOP埋点上，也算是有所收获吧。</p><h2 id="组件化静态库切换"><a href="#组件化静态库切换" class="headerlink" title="组件化静态库切换"></a>组件化静态库切换</h2><p>由于组内的调整，原先的组件化静态库切换方案也逐渐开始有了一些变化，从原先的利用’s.prepare_command’命令，到现在的利用:http/:git的切换。利用Cocoapods的Config单例也达到了清理缓存的功能，达到业务人员无感知的情况下清理缓存，从而进行切换工作，但是这个方案可能会局限于tag的情况，在其他分支下的情况可能会有所不同。应该会需要另外的一些调整。毕竟现在做的静态库的SHA校验也没有做。</p><p>盘点一下已经做好的功能</p><ul><li>源码和静态库完全独立管理（后期如果没有源码权限的同学访问，会直接指向静态库）</li><li>podspec无需配置任何东西，一切都在上传tag版本的时候进行需要绑定</li><li>使用s.source替换原先的s.prepare_command的下载方式，让使用上更加原生pod化</li><li>做了一个Ruby Gem专门来打包静态库（原先的Shell被废弃掉了，不好维护）</li><li>打包好的静态库暴露出特殊源文件（哇这个遇到了好多坑，比如说dummny文件，日乐购）</li><li>完整的子项目打包静态库分包</li><li>异步打包静态库，达到单机子多个Runner在跑也不会出问题。（目标是多机子）</li></ul><p>盘点一下2018年组件化静态库切换要做的</p><ul><li>ZIP文件的SHA校验（这个会对分支打包有帮助，但是还没完全研究）</li><li>打包系统监控（主要公司的gitlab一直不升级，拖慢了这个）</li><li>GEM提交代码后，自动化进行测试。（17年写脚本的时候，最痛苦的就是测试，一个个测试过去，手动的。。。。:-)）</li><li>分支打包静态库</li></ul><h2 id="投资方面"><a href="#投资方面" class="headerlink" title="投资方面"></a>投资方面</h2><p>emmm，说完了技术相关，来聊一聊投资相关吧，17年对于投资，有亏有赚。最主要的应该还是通过亏损和盈利调整好了心态。<br>16年的钱都在债券基金里面，17年基本都在51吧（保守型投资哈哈，保持年化8%左右哈哈。）。51因为有个朋友在，还是挺信任这家企业的。OK，这些事稳定的投资项目，期间我也稍微拿出几万在其他方面进行了尝试，起初大部分钱在债券基金的时候，有一部分的钱投入到了其他类型基金方向。因为不了解行情，瞎比乱投，导致后来亏损程度超过20%，股市基金深不可测，我决定暂时进行退出，多了解了解股市基金的规则之后再继续进入这个圈子内。<br>17年年末的时候，开始进入币圈。当时是10万左右软妹币的比特币。在local那边交易后，1.1万拿到了差不多0.1个左右的BTC，开始了我的抄币之旅。在经历多次买卖的亏损后，开始逐渐了解了市场行情，不贪就能获利，哈哈。顶峰的时候应该是到了1.6WRMB左右了吧。然后最近BTC开始疯狂大跌，调整了下心态。没有太多操作，放着就放着吧，我还是挺看好这一块的。虽然投的也不多。</p><h2 id="旅游"><a href="#旅游" class="headerlink" title="旅游"></a>旅游</h2><p>去了千岛湖、黄山、哈尔冰（2018年1月份去的，写总结之前去了，也算进去吧），虽然没有达到最开始去日本的目标，但是这几次行程对我来说都特别印象深刻。组织能力真的特别重要，还有适当的提前工作要做。你能想象220公里竟然需要开7个小时左右吗？他们那边的路不是按照100码来算的，有些地方是只能开到30码。瞬间就惊呆了。由于准备的不够充分，亚布力滑雪也没有去。这个倒是非常的遗憾吧。<br>精打细算。去旅游真的要精打细算，鲜明的栗子，我去哈尔冰4天花了3500。我的第一位朋友，哈尔滨/北京。7天的个人游，只花了4300。第二位朋友哈尔滨/漠河/北京，11天，5500，她跟我说她跟他老公的机票都是150块钱的，我瞬间惊呆了。</p><h3 id="对于2018年的展望"><a href="#对于2018年的展望" class="headerlink" title="对于2018年的展望"></a>对于2018年的展望</h3><p>2018，少立点FLAG吧，贵在坚持。</p><ul><li>坚持看书，看完12本书吧，一个月一本。</li><li>提升下英语水平。</li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>NO PAINS, NO GAINS.  Hello 2018.</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;OK~工作一年了哈，博客一直没有管，组内事情太多（借口，太懒），虽然写了一堆的文章，但是基本上都是在组内发布了。对外么，部分受限于公司协议之类的，部分是暂时觉得水平有限（反正也没什么人看么）。&lt;/p&gt;
&lt;h2 id=&quot;回顾2016年立的Flag-amp-Bad&quot;&gt;&lt;a href=&quot;#回顾2016年立的Flag-amp-Bad&quot; class=&quot;headerlink&quot; title=&quot;回顾2016年立的Flag &amp;amp; Bad&quot;&gt;&lt;/a&gt;回顾2016年立的Flag &amp;amp; Bad&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;明确自己的人生目标&lt;br&gt;在这一点上，应该考虑了很久才对，但是一直没有给自己一个明确的答案。&lt;br&gt;但是应该有了一系列的目标。&lt;ol&gt;
&lt;li&gt;财务自由？不不不，精神自由。在40岁以后能够达到精神自由，不再受限于生活中的种种因素的干扰。毕竟精神自由取决于个人，我觉得我是一个比较感性的人，钱虽然是越多越好，但是钱么，我觉得够用就好。过上舒舒服服的小日子。但是在此之前就必须要好好努力才可以&lt;/li&gt;
&lt;li&gt;在技术上有所突破，为后来人留下一些真正有用的东西，再者是提高一些知名度。2018，一个月至少一篇以上有含量的技术分享，为之努力吧，也只能这么说一说了。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;去一次日本&lt;br&gt;没去，其他地方倒是去了好几个，对我个人来说也是很棒的体验。&lt;/li&gt;
&lt;li&gt;能够从容的应对各种事情&lt;br&gt;在这个方面，我觉得个人做的还可以，练就了’Pocker Face’，只不过还有待加强心理承受能力吧，主要还是靠这个，心理承受能力好了才行。不然应对一些事情的时候，会不知所措。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="总结" scheme="http://www.zhz.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>RN晴明视频学习笔记 - 第四章</title>
    <link href="http://www.zhz.io/2017/10/11/%E6%99%B4%E6%98%8E%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%9B%9B%E7%AB%A0/"/>
    <id>http://www.zhz.io/2017/10/11/晴明视频学习笔记-第四章/</id>
    <published>2017-10-11T02:29:14.000Z</published>
    <updated>2018-02-12T02:30:14.005Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h2><h3 id="详细的生命周期文档"><a href="#详细的生命周期文档" class="headerlink" title="详细的生命周期文档"></a>详细的生命周期文档</h3><p><a href="https://www.race604.com/react-native-component-lifecycle/" target="_blank" rel="noopener">博客</a></p><h3 id="其他Tips"><a href="#其他Tips" class="headerlink" title="其他Tips"></a>其他Tips</h3><ul><li>render中只做与渲染有关的操作，只读取、不修改任何数据（临时变量除外）<ul><li>因为界面的更改是经常的，所以render是经常触发的</li><li>所以如果你有修改数据等操作，就会多次触发，使结果难以预料</li><li>比如你执行setState，那么setState又触发render，就会导致死循环</li></ul></li><li>随组件加载只执行一次的操作，放在WillMount或者DidMount中<ul><li>比如远程取首页数据（fetch），比如弹出提示框</li></ul></li><li>记得在WillUnmount中销毁定时器和一些订阅事件</li><li>props发生变化，使用WillReceiveProps来处理（比如将变动同步给state）</li></ul><a id="more"></a><h2 id="组件之间的相互通信"><a href="#组件之间的相互通信" class="headerlink" title="组件之间的相互通信"></a>组件之间的相互通信</h2><h3 id="存在的情况"><a href="#存在的情况" class="headerlink" title="存在的情况"></a>存在的情况</h3><ol><li>父组件向子组件进行调用，传递</li><li>子组件之间的相互通信</li><li>子组件向父组件进行通信</li><li>全局跨任意组件间通信</li></ol><h3 id="父组件向子组件进行调用，传递-子组件之间的相互通信"><a href="#父组件向子组件进行调用，传递-子组件之间的相互通信" class="headerlink" title="父组件向子组件进行调用，传递/子组件之间的相互通信"></a>父组件向子组件进行调用，传递/子组件之间的相互通信</h3><ol><li>父组件将自身的state作为子组件的属性props进行传递，父组件调用setState,于是子组件的props相应变化</li><li>通过使用进行调用子组件的方法<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 推荐写法</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;CountDown ref=&#123;</div><div class="line">        instance =&gt; this.countDown = instance</div><div class="line">    &#125; /&gt;</div><div class="line">    )  </div><div class="line">  &#125;</div><div class="line">  componentDidMount() &#123;</div><div class="line">    this.countDown.add(10086);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">// 不推荐写法</div><div class="line">class App extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;CountDown ref=&#123;</div><div class="line">        instance =&gt; this.countDown = instance</div><div class="line">    &#125; /&gt;</div><div class="line">    )  </div><div class="line">  &#125;</div><div class="line">  componentDidMount() &#123;</div><div class="line">    this.countDown.add(10086);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ol><h3 id="子组件向父组件进行通信"><a href="#子组件向父组件进行通信" class="headerlink" title="子组件向父组件进行通信"></a>子组件向父组件进行通信</h3><ol><li>父组件将函数作为props传递给子组件，子组件在需要的时候进行调用，可以将数据作为函数参数进行回传<ul><li>类似于iOS中的block<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CountDown</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  state = &#123;</div><div class="line">    <span class="attr">count</span>: <span class="keyword">this</span>.props.time,</div><div class="line">  &#125;;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">const</span> &#123; count &#125; = <span class="keyword">this</span>.state;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        &lt;Text&gt;&#123;count&#125;&lt;/Text&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">  add = <span class="function">(<span class="params">time</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">      <span class="attr">count</span>: <span class="keyword">this</span>.state.count + time</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">  componentDidMount() &#123;</div><div class="line">    <span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">const</span> &#123; count &#125; = <span class="keyword">this</span>.state;</div><div class="line">      <span class="keyword">if</span> (count === <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.props.timeout &amp;&amp; <span class="keyword">this</span>.props.timeout( <span class="number">1</span> );</div><div class="line">        <span class="keyword">return</span> clearInterval(<span class="keyword">this</span>.timer);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">this</span>.setState(&#123;</div><div class="line">        <span class="attr">count</span>: count - <span class="number">1</span>,</div><div class="line">      &#125;);</div><div class="line">    &#125;, <span class="number">1000</span>);</div><div class="line">  &#125;</div><div class="line">  componentWillUnmount() &#123;</div><div class="line">    clearInterval(<span class="keyword">this</span>.timer);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  addTime = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">this</span>.countDown.add(<span class="number">5</span>)</div><div class="line">  &#125;</div><div class="line">  timeOut = <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</div><div class="line">    alert(<span class="string">'爸爸知道了'</span> + params)</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;View&gt;</div><div class="line">        &lt;TouchableOpacity onPress=&#123;this.addTime&#125;&gt;</div><div class="line">          延长十秒</div><div class="line">        &lt;/TouchableOpacity&gt;</div><div class="line">        &lt;CountDown ref=&#123; countdown =&gt; this.countDown = countdown&#125; time = '3' timeout=&#123;this.timeOut&#125; /&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">AppRegistry.registerComponent('App', () =&gt; App)</div></pre></td></tr></table></figure></li></ul></li></ol><blockquote><p>Note</p><ol><li>跟iOS一样如果一个传入的函数（iOS为Block），加上了括号，那么即会变成函数调用</li><li>根据1，在动态列表中，想传入对应参数就比较困难，所以有以下方法</li></ol></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 如何传入参数以区分不同的点击呢？</div><div class="line">arr.map(d =&gt; &lt;Text key=&#123;d.id&#125; onPress=&#123;this.handlePress&#125;&gt;&#123;d.text&#125;&lt;/Text&gt;)</div><div class="line">// 错误使用，这么做会直接执行</div><div class="line">arr.map(d =&gt; &lt;Text key=&#123;d.id&#125; onPress=&#123;this.handlePress(d.id)&#125;&gt;&#123;d.text&#125;&lt;/Text&gt;)</div><div class="line"></div><div class="line">// 正确使用</div><div class="line">arr.map(d =&gt; &lt;Text key=&#123;d.id&#125; onPress=&#123;() =&gt; this.handlePress(d.id)&#125;&gt;&#123;d.text&#125;&lt;/Text&gt;)</div><div class="line">arr.map(d =&gt; &lt;Text key=&#123;d.id&#125; onPress=&#123;this.handlePress.bind(this, d.id)&#125;&gt;&#123;d.text&#125;&lt;/Text&gt;)</div><div class="line">正确！箭头函数或bind都会生成新函数。传入参数以闭包的形式“封存”，留待调用。</div></pre></td></tr></table></figure><blockquote><p>这里有个坑，父类传到子类，因为函数被bind或者箭头函数重新进行了包装，所以在传参的时候，用在新的参数里面重新添加参数<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 实例代码</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CountDown</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  state = &#123;</div><div class="line">    <span class="attr">count</span>: <span class="keyword">this</span>.props.time,</div><div class="line">  &#125;;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">const</span> &#123; count &#125; = <span class="keyword">this</span>.state;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">        &lt;Text&gt;&#123;count&#125;&lt;/Text&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">  add = <span class="function">(<span class="params">time</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">      <span class="attr">count</span>: <span class="keyword">this</span>.state.count + time</div><div class="line">    &#125;)</div><div class="line">  &#125;</div><div class="line">  componentDidMount() &#123;</div><div class="line">    <span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      <span class="keyword">const</span> &#123; count &#125; = <span class="keyword">this</span>.state;</div><div class="line">      <span class="keyword">if</span> (count === <span class="number">0</span>) &#123;</div><div class="line">        <span class="keyword">this</span>.props.timeout &amp;&amp; <span class="keyword">this</span>.props.timeout(<span class="string">"123"</span>);</div><div class="line">        <span class="keyword">return</span> clearInterval(<span class="keyword">this</span>.timer);</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">this</span>.setState(&#123;</div><div class="line">        <span class="attr">count</span>: count - <span class="number">1</span>,</div><div class="line">      &#125;);</div><div class="line">    &#125;, <span class="number">1000</span>);</div><div class="line">  &#125;</div><div class="line">  componentWillUnmount() &#123;</div><div class="line">    clearInterval(<span class="keyword">this</span>.timer);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  addTime = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">this</span>.countDown.add(<span class="number">5</span>)</div><div class="line">  &#125;</div><div class="line">  timeOut = <span class="function">(<span class="params">params1,params2</span>) =&gt;</span> &#123;</div><div class="line">    alert(<span class="string">'爸爸知道了'</span> + params1 + params2)</div><div class="line">  &#125;</div><div class="line">  state = &#123;</div><div class="line">    <span class="attr">arr</span>: [<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>]</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;View&gt;</div><div class="line">        &#123;</div><div class="line">          this.state.arr.map (i =&gt; &#123;</div><div class="line">            return &lt;CountDown key=&#123;i&#125; time=&#123;i&#125; timeout=&#123;(child) =&gt; this.timeOut(i,child)&#125;/&gt;</div><div class="line">          &#125;)</div><div class="line">        &#125;</div><div class="line">      &lt;/View&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">AppRegistry.registerComponent('App', () =&gt; App)</div></pre></td></tr></table></figure></p></blockquote><h3 id="双向通信"><a href="#双向通信" class="headerlink" title="双向通信"></a>双向通信</h3><ol><li>全局时间订阅系统（EventEmitter）</li><li>（Flux系）单向数据流框架<ul><li>flux</li><li>reflux</li><li>alt</li><li>redux</li></ul></li><li>双向数据流狂阶<ul><li>mobx</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;组件的生命周期&quot;&gt;&lt;a href=&quot;#组件的生命周期&quot; class=&quot;headerlink&quot; title=&quot;组件的生命周期&quot;&gt;&lt;/a&gt;组件的生命周期&lt;/h2&gt;&lt;h3 id=&quot;详细的生命周期文档&quot;&gt;&lt;a href=&quot;#详细的生命周期文档&quot; class=&quot;headerlink&quot; title=&quot;详细的生命周期文档&quot;&gt;&lt;/a&gt;详细的生命周期文档&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.race604.com/react-native-component-lifecycle/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;博客&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;其他Tips&quot;&gt;&lt;a href=&quot;#其他Tips&quot; class=&quot;headerlink&quot; title=&quot;其他Tips&quot;&gt;&lt;/a&gt;其他Tips&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;render中只做与渲染有关的操作，只读取、不修改任何数据（临时变量除外）&lt;ul&gt;
&lt;li&gt;因为界面的更改是经常的，所以render是经常触发的&lt;/li&gt;
&lt;li&gt;所以如果你有修改数据等操作，就会多次触发，使结果难以预料&lt;/li&gt;
&lt;li&gt;比如你执行setState，那么setState又触发render，就会导致死循环&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;随组件加载只执行一次的操作，放在WillMount或者DidMount中&lt;ul&gt;
&lt;li&gt;比如远程取首页数据（fetch），比如弹出提示框&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;记得在WillUnmount中销毁定时器和一些订阅事件&lt;/li&gt;
&lt;li&gt;props发生变化，使用WillReceiveProps来处理（比如将变动同步给state）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="RN" scheme="http://www.zhz.io/tags/RN/"/>
    
  </entry>
  
  <entry>
    <title>RN晴明视频学习笔记 - 第三章</title>
    <link href="http://www.zhz.io/2017/09/12/RN%E6%99%B4%E6%98%8E%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%89%E7%AB%A0/"/>
    <id>http://www.zhz.io/2017/09/12/RN晴明视频学习笔记-第三章/</id>
    <published>2017-09-12T02:24:25.000Z</published>
    <updated>2018-02-12T02:27:45.983Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ReactJS和ReactNative"><a href="#ReactJS和ReactNative" class="headerlink" title="ReactJS和ReactNative"></a>ReactJS和ReactNative</h2><h3 id="两者区别比较"><a href="#两者区别比较" class="headerlink" title="两者区别比较"></a>两者区别比较</h3><p><img src="/resources/44D051F354FFBF35A300E1F8C731FD9B.jpg" alt="IMAGE"></p><ul><li>最重要的区别莫过于是控件方面的区别，对应的分别是对应平台的组件<a id="more"></a></li></ul><p><img src="/resources/DDDD7F748054B8B26D999CBAED87BAC7.jpg" alt="IMAGE"></p><ul><li>ReactNative提供转化的桥梁</li></ul><h3 id="规范-规则"><a href="#规范-规则" class="headerlink" title="规范/规则"></a>规范/规则</h3><p>借鉴与XHTML</p><ol><li>开始和结束标签配对<br>&lt;组件&gt;ooxx&lt;/组件&gt;</li><li>无内容的组件标签应写为自封闭形式<br>&lt;组件&gt;&lt;/组件&gt; 应写为 &lt;组件 /&gt;</li><li><p>可自定义属性，字符串值应使用双引号，其他值用{}括起来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Person age=&#123;<span class="number">30</span>&#125; sex=“male” married=&#123;<span class="literal">true</span>&#125; /&gt;</div></pre></td></tr></table></figure></li><li><p>布尔属性可省略值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Person married /&gt; 等价于 &lt;Person married=&#123;<span class="literal">true</span>&#125; /&gt;</div></pre></td></tr></table></figure></li><li><p>Render(渲染)必须是单一节点<br><img src="/resources/EF0E754011E0D0BED63225A48E19617B.jpg" alt="IMAGE"></p></li><li><p>空值会被自动忽略掉</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;div /&gt; </div><div class="line">&lt;div&gt;&lt;/div&gt; </div><div class="line">&lt;div&gt;&#123;false&#125;&lt;/div&gt; </div><div class="line">&lt;div&gt;&#123;null&#125;&lt;/div&gt; </div><div class="line">&lt;div&gt;&#123;undefined&#125;&lt;/div&gt; </div><div class="line">&lt;div&gt;&#123;true&#125;&lt;/div&gt;</div><div class="line"></div><div class="line">// 技巧 显示和隐藏组件</div><div class="line">&lt;View&gt;</div><div class="line">&#123; showWarning &amp;&amp; &lt;Text&gt;FBI warning&lt;/Text&gt; &#125;</div><div class="line">&lt;/View&gt;</div></pre></td></tr></table></figure></li><li><p>组件必须已大写开头<br><img src="/resources/A7778B71E3034ACDAB3F3FD994D0BE2A.jpg" alt="IMAGE"></p></li><li>文本必须写在Text的组件内<br><img src="/resources/B526EFC8D8E70CE825608A0B338F7B4C.jpg" alt="IMAGE"></li><li>注释的写法<br><img src="/resources/AC476BD3FECD7F5E58F30C30C56577CF.jpg" alt="IMAGE"></li><li>只能嵌入表达式<br><img src="/resources/EDB686DFCD64EBEB3E6378E6931F1049.jpg" alt="IMAGE"></li></ol><h2 id="初识React组件化开发"><a href="#初识React组件化开发" class="headerlink" title="初识React组件化开发"></a>初识React组件化开发</h2><h3 id="在线模拟器"><a href="#在线模拟器" class="headerlink" title="在线模拟器"></a>在线模拟器</h3><p><a href="http://dabbott.github.io/react-native-web-player/" target="_blank" rel="noopener">练习基础的模拟器</a></p><h3 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 导入开发所需要的库</span></div><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span></div><div class="line"></div><div class="line"><span class="comment">// Class类中会默认带有props，可以进行调用获取</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodMorning</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> defaultProps = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'somebody'</span></div><div class="line">  &#125;</div><div class="line">  <span class="keyword">static</span> propTypes = &#123;</div><div class="line"><span class="attr">name</span>:  React.propTypes.string,   <span class="comment">// 约定需要的类型（为字符串）</span></div><div class="line">&#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="comment">// 结构式语法</span></div><div class="line">      &lt;Text&gt;Good morning, &#123;<span class="keyword">this</span>.props.name&#125;!&lt;/Text&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Method中必须要手动去指定一下</span></div><div class="line"><span class="comment">// 如果的这里写了asd那么下面也要改成asd</span></div><div class="line"><span class="comment">// 如果这边有两个参数，默认是取第一个参数去取值</span></div><div class="line"><span class="keyword">const</span> GoodEvening = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    &lt;Text&gt;Good evening, &#123;props.name&#125;&lt;/Text&gt;</div><div class="line">  )</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 生命一个组件 App是名字</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;View&gt;</div><div class="line">        &lt;GoodMorning name="Sir" /&gt;</div><div class="line">        &lt;GoodEvening name="Madam" /&gt;</div><div class="line">      &lt;/View &gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">AppRegistry.registerComponent('App', () =&gt; App)</div></pre></td></tr></table></figure><ul><li>属性使用小结<ul><li>在类中，属性为默认配置，不需要去写，</li><li>在方法中，属性要自己去声明,默认取第一个参数当做是属性的调用类</li><li>在使用属性的时候，必须加入大括号，才可以进行调用</li></ul></li><li>defaultProps 是用来设置属性的默认值的。</li><li>propTypes 是用来约束设置的属性的类型的，这个只在开发阶段有效，发布阶段会被自动移除</li></ul><h3 id="变量作用于"><a href="#变量作用于" class="headerlink" title="变量作用于"></a>变量作用于</h3><ul><li>函数内的局部变量，只能函数内读写，函数运行完后销毁（闭包除外）</li><li>class内的成员变量，在单个class的实例内读写，实例销毁时一并销毁<ul><li>使用时不要忘记this.</li></ul></li><li>class内的静态成员变量，在所有class的实例内共享，不会自动销毁<ul><li>其他模块可通过此class访问（类public）</li></ul></li><li>class外的变量，在所有class的实例内共享（公有），不会自动销毁<ul><li>除非明确export，否则其他模块不可访问（类private）</li></ul></li><li>global全局变量，任何地方可读写（类浏览器的window），不会自动销毁<ul><li>global.test = 1;则之后的任何地方可alert(global.test)或alert(test)</li></ul></li></ul><h3 id="各种变量的写法"><a href="#各种变量的写法" class="headerlink" title="各种变量的写法"></a>各种变量的写法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">global.d = <span class="number">0</span>;<span class="comment">// 全局变量</span></div><div class="line"><span class="keyword">const</span> c = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];<span class="comment">// 在当前文件都可以访问</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodMorning</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="comment">// 成员变量</span></div><div class="line">  <span class="comment">// 推荐写法</span></div><div class="line">  a = <span class="number">1</span> <span class="comment">// 成员变量写法，注意没有var或者let</span></div><div class="line">  </div><div class="line">  <span class="comment">// 并不推荐的写法</span></div><div class="line">  <span class="keyword">constructor</span>(props) &#123; <span class="comment">// 构造函数</span></div><div class="line"><span class="keyword">super</span>(props);  <span class="comment">// 照抄即可，不可省略</span></div><div class="line"><span class="keyword">this</span>.a = <span class="number">1</span>;    </div><div class="line">&#125;</div><div class="line"></div><div class="line">  <span class="comment">// 静态变量 可以直接通过类名来访问，GoodMorning.defaultProps</span></div><div class="line">  <span class="keyword">static</span> b = <span class="number">2</span>;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;Text&gt;Good morning, &#123;this.props.name&#125;!&lt;/Text&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">  method1()&#123;</div><div class="line">    <span class="comment">// 因为是实例的成员变量，所有加入this才可以使用</span></div><div class="line">    <span class="keyword">this</span>.a;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="示例二，使用map进行列表的循环创建"><a href="#示例二，使用map进行列表的循环创建" class="headerlink" title="示例二，使用map进行列表的循环创建"></a>示例二，使用map进行列表的循环创建</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodMorning</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;Text&gt;Good morning, &#123;this.props.name&#125;!&lt;/Text&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> names = [<span class="string">'name1'</span>, <span class="string">'name2'</span>, <span class="string">'name3'</span>,<span class="string">'name4'</span>]</div><div class="line"><span class="keyword">const</span> GoodEvening = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> (</div><div class="line">    &lt;Text&gt;Good evening, &#123;props.name&#125;&lt;/Text&gt;</div><div class="line">  )</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;View&gt;</div><div class="line">        &#123;</div><div class="line">          // 因为虚拟DOM的需要比较差异，使用key方便DOM进行差异的比较，key直接放在直接容器上面</div><div class="line">          names.map(name =&gt; &lt;GoodMorning key=&#123;name&#125;  name=&#123;name&#125; /&gt;)</div><div class="line">        </div><div class="line">        &#125;</div><div class="line">      &lt;/View &gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">AppRegistry.registerComponent('App', () =&gt; App)</div></pre></td></tr></table></figure><h3 id="示例三，点赞示例"><a href="#示例三，点赞示例" class="headerlink" title="示例三，点赞示例"></a>示例三，点赞示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  Text,</div><div class="line">  View,</div><div class="line">  Image,</div><div class="line">  TouchableOpacity,</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  state = &#123;</div><div class="line">    <span class="attr">likes</span>: <span class="number">0</span>,</div><div class="line">  &#125;;</div><div class="line">  onPress = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">const</span> &#123; likes &#125; = <span class="keyword">this</span>.state;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">      <span class="attr">likes</span>: likes + <span class="number">1</span>,</div><div class="line">    &#125;);</div><div class="line">  &#125;;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">        &lt;TouchableOpacity onPress=&#123;this.onPress&#125;&gt;</div><div class="line">          &lt;Image</div><div class="line">            style=&#123;styles.image&#125;</div><div class="line">            source=&#123;&#123;</div><div class="line">              uri: 'https://github.com/facebook/react-native/blob/master/Examples/UIExplorer/js/Thumbnails/like.png?raw=true',</div><div class="line">            &#125;&#125;</div><div class="line">          /&gt;</div><div class="line">        &lt;/TouchableOpacity&gt;</div><div class="line">        &lt;Text&gt;&#123;this.state.likes&#125;&lt;/Text&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: 1,</div><div class="line">    justifyContent: 'center',</div><div class="line">    alignItems: 'center',</div><div class="line">    backgroundColor: '#F5FCFF',</div><div class="line">  &#125;,</div><div class="line">  image: &#123;</div><div class="line">    width: 65,</div><div class="line">    height: 65,</div><div class="line">  &#125;,</div><div class="line">&#125;)</div><div class="line"></div><div class="line">AppRegistry.registerComponent('App', () =&gt; App)</div></pre></td></tr></table></figure><p>总结</p><ul><li>一切界面的变化都是因为state变化而引起的</li><li>但是state的修改必须通过setState进行修改</li><li>直接通过修改属性值是无效的，例如this.state.likes = 100;这样的直接赋值修改是无效的</li><li>setState是一个merge合并操作，只修改指定的属性，不影响其他属性</li><li><p>setState是一个异步操作，修改之后并不能马上修改生效。</p><ul><li>比如说在setState之后马上运行alert，进行数字的显示，这个时候是错的<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 错误示例</span></div><div class="line">onPress = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> &#123; likes &#125; = <span class="keyword">this</span>.state;</div><div class="line">  <span class="keyword">this</span>.setState(&#123;</div><div class="line">    <span class="attr">likes</span>: likes + <span class="number">1</span>,</div><div class="line">  &#125;);</div><div class="line">  alert(<span class="keyword">this</span>.state.like);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 正确示例</span></div><div class="line">onPress = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="keyword">const</span> &#123; likes &#125; = <span class="keyword">this</span>.state;</div><div class="line">  <span class="keyword">const</span> newLikes = likes + <span class="number">1</span>;</div><div class="line">  <span class="keyword">this</span>.setState(&#123;</div><div class="line">    <span class="attr">likes</span>: newLikes,</div><div class="line">  &#125;);</div><div class="line">  alert(newLikes);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></li></ul><h3 id="为什么要引入State的概念"><a href="#为什么要引入State的概念" class="headerlink" title="为什么要引入State的概念"></a>为什么要引入State的概念</h3><p><img src="/resources/9F302D689DC97C4B7A739579EFE09BCA.jpg" alt="IMAGE"><br>如图所示，虚拟DOM的修改只是一个增量更新，比较得出前和后的差异，计算出diff，然后去重新渲染差异部分<br><img src="/resources/E105DA6EEC89A567AC63D8E805575EB1.jpg" alt="IMAGE"><br><img src="/resources/361B31527F3ECE475B3705A81659E72C.jpg" alt="IMAGE"><br>Key的使用方便了DOM计算出差异部分，对差异部分可以进行更方便的比较。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><h3 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h3><p><a href="https://facebook.github.io/react/docs/introducing-jsx.html" target="_blank" rel="noopener">Introducint JSX</a><br><a href="https://facebook.github.io/react/docs/jsx-in-depth.html" target="_blank" rel="noopener">JSX In Depth</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ReactJS和ReactNative&quot;&gt;&lt;a href=&quot;#ReactJS和ReactNative&quot; class=&quot;headerlink&quot; title=&quot;ReactJS和ReactNative&quot;&gt;&lt;/a&gt;ReactJS和ReactNative&lt;/h2&gt;&lt;h3 id=&quot;两者区别比较&quot;&gt;&lt;a href=&quot;#两者区别比较&quot; class=&quot;headerlink&quot; title=&quot;两者区别比较&quot;&gt;&lt;/a&gt;两者区别比较&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/resources/44D051F354FFBF35A300E1F8C731FD9B.jpg&quot; alt=&quot;IMAGE&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最重要的区别莫过于是控件方面的区别，对应的分别是对应平台的组件
    
    </summary>
    
    
      <category term="RN" scheme="http://www.zhz.io/tags/RN/"/>
    
  </entry>
  
  <entry>
    <title>RN晴明视频学习笔记 - 第二章</title>
    <link href="http://www.zhz.io/2017/09/10/%E6%99%B4%E6%98%8E%E8%A7%86%E9%A2%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%BA%8C%E7%AB%A0/"/>
    <id>http://www.zhz.io/2017/09/10/晴明视频学习笔记-第二章/</id>
    <published>2017-09-10T08:51:50.000Z</published>
    <updated>2018-02-12T02:28:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原生-Hybird-RN"><a href="#原生-Hybird-RN" class="headerlink" title="原生/Hybird/RN"></a>原生/Hybird/RN</h2><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><table><thead><tr><th>形式</th><th>介绍</th><th>优势</th><th>劣势</th></tr></thead><tbody><tr><td>原生</td><td>使用原生语言进行编写开发</td><td>性能好/有生态圈的优势点</td><td>各个平台有各自的语言，学习成本大，不兼容</td></tr><tr><td>Hybrid App混合开发</td><td>使用前段代码，在各个平台上有他的容器WebView，利用他进行渲染</td><td>跨平台，适合简单应用</td><td>性能不是很好 </td></tr><tr><td>RN</td><td>较于前面两者之间，使用JS开发，翻译成原生组件进行展示</td><td>学习成本低，天然跨平台，无审核热更新，具有优秀的社区能力（开源库）</td><td>性能</td><td></td></tr></tbody></table><h2 id="ECMAScript"><a href="#ECMAScript" class="headerlink" title="ECMAScript"></a>ECMAScript</h2><p>名词解释：ECMAScript是一种由Ecma国际（前身为欧洲计算机制造商协会,英文名称是European Computer Manufacturers Association）通过ECMA-262标准化的脚本程序设计语言。这种语言在万维网上应用广泛，它往往被称为JavaScript或JScript，但实际上后两者是ECMA-262标准的实现和扩展。</p><p>简单的说：ECMAScript是一种标准文本语法，JS是根据其进行设计的</p><a id="more"></a><h3 id="变量和常量生命"><a href="#变量和常量生命" class="headerlink" title="变量和常量生命"></a>变量和常量生命</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> greeting = <span class="string">'hi'</span>; <span class="comment">// 新式写法，推荐使用</span></div><div class="line"><span class="keyword">var</span> greeting1 = <span class="string">'hi1'</span>;  <span class="comment">//老式写法，不推荐使用</span></div><div class="line"><span class="keyword">const</span> answer = <span class="number">4</span>;</div><div class="line"><span class="comment">// 多个生命简单些发</span></div><div class="line"><span class="keyword">let</span> a = <span class="string">'1'</span>; b = <span class="string">'2'</span>;</div><div class="line"><span class="comment">// 没有声明或者声明后没有赋值的变量值为常量</span></div></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(a,b) =&gt; a+b;</div></pre></td></tr></table></figure><ul><li><p>class外部：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> 函数名 = <span class="function">(<span class="params">参数</span>) =&gt;</span> &#123; 内部逻辑 &#125;;</div></pre></td></tr></table></figure></li><li><p>class内部：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">    方法名 = <span class="function">(<span class="params">参数</span>) =&gt;</span> &#123;</div><div class="line">    <span class="comment">// 内部逻辑</span></div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><blockquote><p>可能并不是很习惯这种写法，联想方案<br>f(x) = πx^2<br>(x) =&gt; 3.14 <em> x </em> x<br>输入 =&gt; 输出<br>参数 =&gt; 返回表达式</p></blockquote><ul><li>Tips:这里有个坑，如果箭头函数的代码块部分使用了大括号，则此时切莫忘了使用return语句返回：</li><li>() =&gt; 1          // 返回1</li><li>() =&gt; { 1 }         // 返回 undefined</li><li>() =&gt; { return 1; }    // 返回1</li></ul><h3 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h3><p>…扩展运算符好比是把一个压缩包给解压到当前目录<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 数组</span></div><div class="line">    <span class="comment">// 数组</span></div><div class="line">    <span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">    <span class="built_in">console</span>.log(...a)     <span class="comment">// 1 2 3 </span></div><div class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>, ...a, <span class="number">5</span>) <span class="comment">// 1 1 2 3 5</span></div><div class="line"></div><div class="line">    <span class="comment">// 对象</span></div><div class="line">    <span class="keyword">let</span> z = &#123; <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;; </div><div class="line">    <span class="keyword">let</span> n = &#123; ...z &#125;; </div><div class="line">    <span class="built_in">console</span>.log(n)<span class="comment">// &#123; a: 3, b: 4 &#125;</span></div></pre></td></tr></table></figure></p><h3 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h3><p>可以想象成一个语法糖，可以帮助你快速的从对象中获取数据<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 数组</span></div><div class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="built_in">console</span>.log(a, b, c); <span class="comment">//  1 2 3</span></div><div class="line"></div><div class="line"><span class="comment">// 对象</span></div><div class="line"><span class="keyword">var</span> props = &#123; <span class="attr">checked</span>: <span class="literal">false</span>, <span class="attr">data</span>: &#123; <span class="attr">count</span>: <span class="number">3</span>, <span class="attr">price</span>: <span class="number">100</span> &#125; &#125;; </div><div class="line"><span class="comment">// 从props中拿到checked的值和count值</span></div><div class="line"><span class="keyword">var</span> &#123; checked, <span class="attr">data</span>: &#123; count &#125; &#125; = props;</div><div class="line"><span class="built_in">console</span>.log(checked, count);<span class="comment">// false  3</span></div></pre></td></tr></table></figure></p><h3 id="数组的新增方法"><a href="#数组的新增方法" class="headerlink" title="数组的新增方法"></a>数组的新增方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 数组查找元素</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>); <span class="comment">// true </span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>); <span class="comment">// false</span></div><div class="line"><span class="comment">// 字符串也可用</span></div><div class="line">‘hello’.includes(‘hell’);<span class="comment">// true</span></div><div class="line"></div><div class="line"><span class="comment">// map返回等长的新数组</span></div><div class="line"><span class="keyword">let</span> odds = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>];</div><div class="line"><span class="keyword">let</span> evens = odds.map(<span class="function"><span class="params">i</span> =&gt;</span> i + <span class="number">1</span>);  <span class="comment">// [2, 4, 6, 8, 10]</span></div><div class="line"></div><div class="line"><span class="comment">// 使用标记技巧</span></div><div class="line"><span class="keyword">let</span> names = [‘tom’, ‘jerry’];</div><div class="line"><span class="keyword">let</span> nameTags = names.map(<span class="function"><span class="params">n</span> =&gt;</span> &lt;Text&gt;&#123;n&#125;&lt;<span class="regexp">/Text&gt;)</span></div></pre></td></tr></table></figure><h3 id="推荐书籍"><a href="#推荐书籍" class="headerlink" title="推荐书籍"></a>推荐书籍</h3><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide" target="_blank" rel="noopener">MDN（Mozilla开发者网络）</a></li><li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">ECMAScript 6 入门（阮一峰）</a></li></ol><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><h3 id="为什么RN需要Node-js"><a href="#为什么RN需要Node-js" class="headerlink" title="为什么RN需要Node.js"></a>为什么RN需要Node.js</h3><ol><li>提供React Packager的运行环境</li><li>提供npm包管理器来安装第三方模块 (node_modules)</li><li>提供一些可参考的代码规范（commonjs）</li></ol><h3 id="RN的基本架构"><a href="#RN的基本架构" class="headerlink" title="RN的基本架构"></a>RN的基本架构</h3><p><img src="/resources/A28F86AE1A1C71F1FC29711BAA78B8E0.jpg" alt="IMAGE"></p><h3 id="npm使用"><a href="#npm使用" class="headerlink" title="npm使用"></a>npm使用</h3><ol><li>npm依赖于同级目录下一个package.json文件进行，仓库的下载和依赖管理。没有这个文件可以使用npm init进行创建</li><li>npm install (npm i)包安装器<ul><li>附加命令 -g，安装在系统根目录中，比如说react-native-cli</li><li>–save/-S 查找仓库中某某库的方法下载，并且安装，填写进入package.json文件</li></ul></li><li>npm下载的库都会存放在同级目录下的node_modules文件夹中，此文件夹随用随装，原则上不复制、不移动、不修改、不上传</li></ol><h3 id="导入导出概念"><a href="#导入导出概念" class="headerlink" title="导入导出概念"></a>导入导出概念</h3><ol><li>JS本身没有模块的概念，他们之间是无法自由引用的。所以node.js制定了commonjs模块贵方，方便了拆分和引用代码<a href="https://nodejs.org/docs/latest/api/modules.html" target="_blank" rel="noopener">参考链接</a></li><li><p>提供两种引用的语法</p><ul><li><p>ES5 不推荐</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = moduleA;      <span class="comment">// a.js导出moduleA模块</span></div><div class="line"><span class="keyword">var</span> moduleA = <span class="built_in">require</span>(’./a’)  <span class="comment">// 同级目录下的B模块导入moduleA模块</span></div></pre></td></tr></table></figure></li><li><p>ES6 推荐使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> moduleA;    <span class="comment">// a.js导出模块A</span></div><div class="line"><span class="keyword">import</span> moduleA <span class="keyword">from</span> ’./a’  <span class="comment">// b.js目录下导入同级目录的a.js文件的某个模块</span></div></pre></td></tr></table></figure></li></ul></li><li><p>模块查找/引用规则：</p><ul><li>require(‘ooxx’) – 引用node_modules/ooxx/index.js，或是node_modules/ooxx/package.json中main字段所指定的js文件</li><li>require(‘./a’) – 引用同目录下的a.js文件。注意 ./ 不能省略，.js后缀可写可不写</li><li>require(‘../a/b’) – 引用父目录中的a目录中的b.js文件；若b为目录名，则查找引用b目录中的index.js文件。</li></ul></li></ol><blockquote><p>npm仓库是需要翻墙的，可以使用国内的淘宝源,使用下述命令进行源的切换<br>npm config set registry <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a> –global<br>npm config set disturl <a href="https://npm.taobao.org/dist" target="_blank" rel="noopener">https://npm.taobao.org/dist</a> –global</p></blockquote><h2 id="知识点储备"><a href="#知识点储备" class="headerlink" title="知识点储备"></a>知识点储备</h2><ol><li>所有的JS文件，都会被package打包整合进入main.jsbundle文件中。</li><li>main.jsbundle文件可以通过pushby/codepush（微软）进行发布后的热更新。</li></ol><h2 id="书籍网站推荐推荐"><a href="#书籍网站推荐推荐" class="headerlink" title="书籍网站推荐推荐"></a>书籍网站推荐推荐</h2><h3 id="JS相关"><a href="#JS相关" class="headerlink" title="JS相关"></a>JS相关</h3><ol><li>JavaScript 权威指南（第6版）</li><li>JavaScript 高级程序设计（第3版）</li><li>JavaScript 语言精粹</li></ol><blockquote><p>1和2为基础，二选一去看，3为使用技巧上的一些东西</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;原生-Hybird-RN&quot;&gt;&lt;a href=&quot;#原生-Hybird-RN&quot; class=&quot;headerlink&quot; title=&quot;原生/Hybird/RN&quot;&gt;&lt;/a&gt;原生/Hybird/RN&lt;/h2&gt;&lt;h3 id=&quot;对比&quot;&gt;&lt;a href=&quot;#对比&quot; class=&quot;headerlink&quot; title=&quot;对比&quot;&gt;&lt;/a&gt;对比&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;形式&lt;/th&gt;
&lt;th&gt;介绍&lt;/th&gt;
&lt;th&gt;优势&lt;/th&gt;
&lt;th&gt;劣势&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;原生&lt;/td&gt;
&lt;td&gt;使用原生语言进行编写开发&lt;/td&gt;
&lt;td&gt;性能好/有生态圈的优势点&lt;/td&gt;
&lt;td&gt;各个平台有各自的语言，学习成本大，不兼容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hybrid App混合开发&lt;/td&gt;
&lt;td&gt;使用前段代码，在各个平台上有他的容器WebView，利用他进行渲染&lt;/td&gt;
&lt;td&gt;跨平台，适合简单应用&lt;/td&gt;
&lt;td&gt;性能不是很好 &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RN&lt;/td&gt;
&lt;td&gt;较于前面两者之间，使用JS开发，翻译成原生组件进行展示&lt;/td&gt;
&lt;td&gt;学习成本低，天然跨平台，无审核热更新，具有优秀的社区能力（开源库）&lt;/td&gt;
&lt;td&gt;性能&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;ECMAScript&quot;&gt;&lt;a href=&quot;#ECMAScript&quot; class=&quot;headerlink&quot; title=&quot;ECMAScript&quot;&gt;&lt;/a&gt;ECMAScript&lt;/h2&gt;&lt;p&gt;名词解释：ECMAScript是一种由Ecma国际（前身为欧洲计算机制造商协会,英文名称是European Computer Manufacturers Association）通过ECMA-262标准化的脚本程序设计语言。这种语言在万维网上应用广泛，它往往被称为JavaScript或JScript，但实际上后两者是ECMA-262标准的实现和扩展。&lt;/p&gt;
&lt;p&gt;简单的说：ECMAScript是一种标准文本语法，JS是根据其进行设计的&lt;/p&gt;
    
    </summary>
    
    
      <category term="RN" scheme="http://www.zhz.io/tags/RN/"/>
    
  </entry>
  
  <entry>
    <title>ReactiveCocoa - 双向绑定，不完全解析</title>
    <link href="http://www.zhz.io/2017/08/17/ReactiveCocoa-%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A%EF%BC%8C%E4%B8%8D%E5%AE%8C%E5%85%A8%E8%A7%A3%E6%9E%90/"/>
    <id>http://www.zhz.io/2017/08/17/ReactiveCocoa-双向绑定，不完全解析/</id>
    <published>2017-08-17T03:00:56.000Z</published>
    <updated>2018-02-12T03:02:42.725Z</updated>
    
    <content type="html"><![CDATA[<h3 id="RACChannelTerminal"><a href="#RACChannelTerminal" class="headerlink" title="RACChannelTerminal"></a>RACChannelTerminal</h3><p>我们先来看看双向绑定这件事情。<br><img src="resources/41863AF8A61873D1D38D72BF3C38FC69.jpg" alt="IMAGE"><br>我们如何实现信号从A传到B，又可以从B传到A呢。利用信号的双向传递的话，我们可以用RACSubject，这样A发的信号B就能接到，而且B发的信号A也能够接收到。<br><img src="resources/3333985DB5A5A590D5966CFDDFDC34A6.jpg" alt="IMAGE"><br><a id="more"></a><br>这样也有个问题，因为A是Subject的订阅者又是接受者，A发送给B的东西，A也同样会被接受到，这是我们不希望看到的。</p><ul><li>解释：为了解决数据双向传递，特别设计的一个类</li><li>作用：上面已经有描述不再说了</li><li>案例：<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 建立双向绑定方式1</span></div><div class="line">RACChannelTo(<span class="keyword">self</span>,string1) = RACChannelTo(<span class="keyword">self</span>,string2);</div><div class="line"><span class="comment">// 建立双向绑定方式2</span></div><div class="line"><span class="keyword">self</span>.channel1 = [[RACKVOChannel alloc] initWithTarget:<span class="keyword">self</span> keyPath:<span class="string">@"string1"</span> nilValue:<span class="literal">nil</span>];</div><div class="line"><span class="keyword">self</span>.channel2 = [[RACKVOChannel alloc] initWithTarget:<span class="keyword">self</span> keyPath:<span class="string">@"string2"</span> nilValue:<span class="literal">nil</span>];</div><div class="line"><span class="keyword">self</span>.channel1[<span class="string">@"followingTerminal"</span>] = <span class="keyword">self</span>.channel2[<span class="string">@"followingTerminal"</span>];</div></pre></td></tr></table></figure></li></ul><blockquote><p>方案2只是方案1的展开，我们平时用的都是RACKVOChannel。所以以此为例</p></blockquote><ul><li>订阅关系<br><img src="resources/8053428106F17C5443DC8D72D019093C.jpg" alt="IMAGE"><br>特别解释：</li></ul><ol><li>lead中的value等于follow的other<br>3=7 4=6 10=12 11=13</li><li>同一个Terminal中的信号不会进行互相传递，因为使用ignoreValues进行了忽略(只是提及大可忽略这条规则)</li><li>string1和string2并不是真正的订阅者。这边只是为了显示方便给大家演示这么写了。<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">RACChannel</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)init &#123;</div><div class="line"><span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line"></div><div class="line">RACReplaySubject *leadingSubject = [[RACReplaySubject replaySubjectWithCapacity:<span class="number">0</span>] setNameWithFormat:<span class="string">@"leadingSubject"</span>];</div><div class="line">RACReplaySubject *followingSubject = [[RACReplaySubject replaySubjectWithCapacity:<span class="number">1</span>] setNameWithFormat:<span class="string">@"followingSubject"</span>];</div><div class="line"></div><div class="line">[[leadingSubject ignoreValues] subscribe:followingSubject];</div><div class="line">[[followingSubject ignoreValues] subscribe:leadingSubject];</div><div class="line"></div><div class="line">  <span class="comment">// 结合下面的Terminal初始化，即可看到leaf的value和follow的other是相等的</span></div><div class="line">_leadingTerminal = [[[RACChannelTerminal alloc] initWithValues:leadingSubject otherTerminal:followingSubject] setNameWithFormat:<span class="string">@"leadingTerminal"</span>];</div><div class="line">_followingTerminal = [[[RACChannelTerminal alloc] initWithValues:followingSubject otherTerminal:leadingSubject] setNameWithFormat:<span class="string">@"followingTerminal"</span>];</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">RACChannelTerminal</span></span></div><div class="line">- (<span class="keyword">instancetype</span>)initWithValues:(RACSignal *)values otherTerminal:(<span class="keyword">id</span>&lt;RACSubscriber&gt;)otherTerminal &#123;</div><div class="line"><span class="built_in">NSCParameterAssert</span>(values != <span class="literal">nil</span>);</div><div class="line"><span class="built_in">NSCParameterAssert</span>(otherTerminal != <span class="literal">nil</span>);</div><div class="line">    </div><div class="line"><span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line"></div><div class="line">_values = values;</div><div class="line">_otherTerminal = otherTerminal;</div><div class="line"></div><div class="line"><span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure></li></ol><ul><li>发送流程</li></ul><ol><li>String1开始发出了属性改变的信号。</li><li>由1.2.3这个value订阅者进行信号的接收</li><li>由于3=7，3又是热信号，收到信号后进行信号转发发送给13这个订阅者</li><li>由于13=11，11为热信号，收到信号后，发送给订阅者。执行setValue:ForKey:将值进行传递</li></ol><ul><li>看下代码<br>步骤1中的关键代码<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 这段是KVC注册属性变化之后的信号回调处理</span></div><div class="line">RACDisposable *observationDisposable = [strongTarget rac_observeKeyPath:keyPath options:<span class="built_in">NSKeyValueObservingOptionInitial</span> observer:<span class="literal">nil</span> block:^(<span class="keyword">id</span> value, <span class="built_in">NSDictionary</span> *change, <span class="built_in">BOOL</span> causedByDealloc, <span class="built_in">BOOL</span> affectedOnlyLastComponent) &#123;</div><div class="line"><span class="keyword">if</span> (!causedByDealloc &amp;&amp; affectedOnlyLastComponent &amp;&amp; <span class="keyword">self</span>.currentThreadData.ignoreNextUpdate) &#123;</div><div class="line">[<span class="keyword">self</span> destroyCurrentThreadData];</div><div class="line"><span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line">    <span class="comment">// 交给了leadingTerminal进行信号转发</span></div><div class="line">[<span class="keyword">self</span>.leadingTerminal sendNext:value];</div><div class="line">&#125;];</div></pre></td></tr></table></figure></li></ul><p>在Terminal中，我们可以看到其实terminal只是作为包装而已，真正发送和订阅时由value和other来进行订阅和发送的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">@implementation RACChannelTerminal</div><div class="line"></div><div class="line">#pragma mark Lifecycle</div><div class="line"></div><div class="line">- (instancetype)initWithValues:(RACSignal *)values otherTerminal:(id&lt;RACSubscriber&gt;)otherTerminal &#123;</div><div class="line">NSCParameterAssert(values != nil);</div><div class="line">NSCParameterAssert(otherTerminal != nil);</div><div class="line">    </div><div class="line">self = [super init];</div><div class="line"></div><div class="line">_values = values;</div><div class="line">_otherTerminal = otherTerminal;</div><div class="line"></div><div class="line">return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark RACSignal</div><div class="line"></div><div class="line">- (RACDisposable *)subscribe:(id&lt;RACSubscriber&gt;)subscriber &#123;</div><div class="line">return [self.values subscribe:subscriber];</div><div class="line">&#125;</div><div class="line"></div><div class="line">#pragma mark &lt;RACSubscriber&gt;</div><div class="line"></div><div class="line">- (void)sendNext:(id)value &#123;</div><div class="line">[self.otherTerminal sendNext:value];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)sendError:(NSError *)error &#123;</div><div class="line">[self.otherTerminal sendError:error];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)sendCompleted &#123;</div><div class="line">[self.otherTerminal sendCompleted];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)didSubscribeWithDisposable:(RACCompoundDisposable *)disposable &#123;</div><div class="line">[self.otherTerminal didSubscribeWithDisposable:disposable];</div><div class="line">&#125;</div><div class="line"></div><div class="line">@end</div></pre></td></tr></table></figure></p><p>步骤4中的关键代码：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[[<span class="keyword">self</span>.leadingTerminal</div><div class="line">finally:^&#123;</div><div class="line">[observationDisposable dispose];</div><div class="line">&#125;]</div><div class="line">subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line"><span class="built_in">NSObject</span> *object = (keyPathComponentsCount &gt; <span class="number">1</span> ? [<span class="keyword">self</span>.target valueForKeyPath:keyPathByDeletingLastKeyPathComponent] : <span class="keyword">self</span>.target);</div><div class="line"><span class="keyword">if</span> (object == <span class="literal">nil</span>) <span class="keyword">return</span>;</div><div class="line"></div><div class="line">[<span class="keyword">self</span> createCurrentThreadData];</div><div class="line"><span class="keyword">self</span>.currentThreadData.ignoreNextUpdate = <span class="literal">YES</span>;</div><div class="line">      <span class="comment">// 可以看到收到信号后，进行setValue:forKey:进行赋值</span></div><div class="line">[object setValue:x ?: nilValue forKey:lastKeyPathComponent];</div><div class="line">&#125; error:^(<span class="built_in">NSError</span> *error) &#123;</div><div class="line"><span class="built_in">NSCAssert</span>(<span class="literal">NO</span>, <span class="string">@"Received error in %@: %@"</span>, <span class="keyword">self</span>, error);</div><div class="line"></div><div class="line"><span class="comment">// Log the error if we're running with assertions disabled.</span></div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"Received error in %@: %@"</span>, <span class="keyword">self</span>, error);</div><div class="line">&#125;];</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;RACChannelTerminal&quot;&gt;&lt;a href=&quot;#RACChannelTerminal&quot; class=&quot;headerlink&quot; title=&quot;RACChannelTerminal&quot;&gt;&lt;/a&gt;RACChannelTerminal&lt;/h3&gt;&lt;p&gt;我们先来看看双向绑定这件事情。&lt;br&gt;&lt;img src=&quot;resources/41863AF8A61873D1D38D72BF3C38FC69.jpg&quot; alt=&quot;IMAGE&quot;&gt;&lt;br&gt;我们如何实现信号从A传到B，又可以从B传到A呢。利用信号的双向传递的话，我们可以用RACSubject，这样A发的信号B就能接到，而且B发的信号A也能够接收到。&lt;br&gt;&lt;img src=&quot;resources/3333985DB5A5A590D5966CFDDFDC34A6.jpg&quot; alt=&quot;IMAGE&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="ReactiveCocoa" scheme="http://www.zhz.io/tags/ReactiveCocoa/"/>
    
  </entry>
  
  <entry>
    <title>Advanced_Apple_Debugging阅读笔记Part1</title>
    <link href="http://www.zhz.io/2017/06/05/Advanced-Apple-Debugging%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0Part1/"/>
    <id>http://www.zhz.io/2017/06/05/Advanced-Apple-Debugging阅读笔记Part1/</id>
    <published>2017-06-05T13:54:27.000Z</published>
    <updated>2017-06-05T13:57:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文为<a href="https://store.raywenderlich.com/products/advanced-apple-debugging-and-reverse-engineering" target="_blank" rel="noopener">Advanced Apple Debugging &amp; Reverse Engineering</a>的第一章阅读笔记，<br>有不正之处望指正</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>关闭Rootless模式</p><ul><li>重启电脑，启动后长按Commond+R</li><li>进入控制台</li><li>输入 csrutil disable; reboot</li><li>不久后就会重启电脑</li></ul><h3 id="File"><a href="#File" class="headerlink" title="File"></a>File</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ lldb /Projects/Sketch/build/Debug/Sketch.app </div><div class="line">&gt;&gt; Current executable set to &apos;/Projects/Sketch/build/Debug/Sketch.app&apos; (x86_64)</div></pre></td></tr></table></figure><p>等同于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ lldb </div><div class="line">(lldb) file /Projects/Sketch/build/Debug/Sketch.app </div><div class="line">&gt;&gt; Current executable set to &apos;/Projects/Sketch/build/Debug/Sketch.app&apos; (x86_64).</div></pre></td></tr></table></figure></p><a id="more"></a><h3 id="process"><a href="#process" class="headerlink" title="process"></a>process</h3><ul><li>launch 启动执行目录的程序</li></ul><h3 id="image"><a href="#image" class="headerlink" title="image"></a>image</h3><ul><li><p>lookup </p><ul><li><p>-n NAME 查找具体代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(lldb) image lookup -n &quot;-[UIViewController viewDidLoad]&quot;</div></pre></td></tr></table></figure></li><li><p>-rn NAME 查找所有符合NAME规则的符号。符号可以正则，所以说符合规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">(lldb) image lookup -rn test</div><div class="line">#Swift</div><div class="line">(lldb) image lookup -rn Signals.SwiftTestClass.name.setter </div><div class="line">2 matches found in /Users/derekselander/Library/Developer/Xcode/DerivedData/Signals-bqrjxlceauwfuihjesxmgfodimef/Build/Products/Debug-iphonesimulator/Signals.app/Signals:</div><div class="line">      Address: Signals[0x000000010000aba0] (Signals.__TEXT.__text +38704)</div><div class="line">      Summary: Signals`@objc Signals.SwiftTestClass.name.setter :raywenderlich.com 47</div><div class="line">      Advanced Apple Debugging Chapter 4: Stopping in Code Swift.ImplicitlyUnwrappedOptional&lt;Swift.String&gt; at SwiftTestClass.swift</div><div class="line">      Address: Signals[0x000000010000ac60] (Signals.__TEXT.__text + 38896)</div><div class="line">      Summary: Signals`Signals.SwiftTestClass.name.setter :Swift.ImplicitlyUnwrappedOptional&lt;Swift.String&gt; at SwiftTestClass.swift</div><div class="line">#Mark 一下这边出现了两个，是因为这个工程既有Swift代码也有OC代码，苹果为了做桥接加了第一个后续可以无视</div></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Breakpoint"><a href="#Breakpoint" class="headerlink" title="Breakpoint"></a>Breakpoint</h3><ul><li><p>设置断点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">// 简写的形式</div><div class="line">(lldb) b -[UIViewController viewDidLoad]</div><div class="line"> Breakpoint 1: where = UIKit`-[UIViewController viewDidLoad], address = 0x0000000102bbd788</div><div class="line">//如果想在某个文件中的某行设置一个断点，可使用以下命令：</div><div class="line">(lldb) breakpoint set --file foo.c --line 12</div><div class="line">//如果想给某个函数设置断点，可使用以下命令：</div><div class="line">(lldb) breakpoint set --name foo</div><div class="line">//如果想给C++中所有命名为foo的方法设置断点，可以使用以下命令：</div><div class="line">(lldb) breakpoint set --method foo</div><div class="line"></div><div class="line"># 下面两者等价</div><div class="line">(lldb) b Breakpoints.SwiftTestClass.name.setter :Swift.ImplicitlyUnwrappedOptional&lt;Swift.String&gt;</div><div class="line">(lldb) rb SwiftTestClass.name.setter</div><div class="line"></div><div class="line"># 部分正则参考</div><div class="line">(lldb) rb name\.setter // image lookup后给所有匹配上name.setter的打上断点</div><div class="line">(lldb) rb &apos;\-\[UIViewController\ &apos; // 给这个类的所有方法打上断点</div><div class="line">(lldb) rb &apos;\-\[UIViewController(\(\w+\))?\ &apos;  // 给这个类的所有Category打上断点(没有验证)</div><div class="line">(lldb) rb . -f DetailViewController.swift // 给这个文件内的所有方法打上断点</div><div class="line">(lldb) rb . //给所有的方法打上断点 很危险</div><div class="line">(lldb) rb . -s UIKit // 只断点UIKit库里面的所有方法</div><div class="line"></div><div class="line"># 特殊用法</div><div class="line">^(@).* 这个需要考证是用来屏蔽上面说的桥接问题</div></pre></td></tr></table></figure></li><li><p>其他操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">  # 断点列表</div><div class="line">  (lldb) breakpoint list 1</div><div class="line">  1: name = &apos;main&apos;, locations = 20, resolved = 20, hit count = 0</div><div class="line">1.1: where = Breakpoints`main + 22 at AppDelegate.swift:12, address =0x00000001057676e6, resolved, hit count = 0</div><div class="line">1.2: where = Foundation`-[NSThread main], address = 0x000000010584d182,resolved, hit count = 0</div><div class="line">1.3: where = Foundation`-[NSBlockOperation main], address =0x000000010585df4a, resolved, hit count = 0</div><div class="line">...</div><div class="line"></div><div class="line">  # 断点删除</div><div class="line">  (lldb) breakpoint delete 1</div><div class="line">  (lldb) breakpoint delete 1.1 这个准确的说是disable并不是真正意义上的删除</div></pre></td></tr></table></figure></li></ul><h3 id="Expression-amp-po-amp-p"><a href="#Expression-amp-po-amp-p" class="headerlink" title="Expression &amp; po &amp; p"></a>Expression &amp; po &amp; p</h3><p>po =  expression -O –</p><p>Note: lldb的Context的问题，如果当前代码是在OC下的话要用OC语法，如果是在Swift的环境下要用Swift代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># Swift环境下</div><div class="line">(lldb) po [UIApplication sharedApplication] # 不能这么使用</div><div class="line">(lldb) expression -l objc -O -- [UIApplication sharedApplication]</div><div class="line">(lldb) po UIApplication.shared </div><div class="line"></div><div class="line"># OC环境下</div><div class="line">(lldb) po $R0.title</div><div class="line">(lldb) expression -l swift -- $R0.title</div></pre></td></tr></table></figure></p><p>创建实例的时候要在实例名字前面加$符号，不然不能够正常使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 反例</div><div class="line">(lldb) po id test = [NSObject new]</div><div class="line">(lldb) po test</div><div class="line">error: use of undeclared identifier &apos;test&apos;</div><div class="line"></div><div class="line"># 正确用法</div><div class="line">(lldb) po id $test = [NSObject new]</div><div class="line">(lldb) po $test</div><div class="line">&lt;NSObject: 0x60000001d190&gt;</div><div class="line">(lldb) expression -l swift -O -- $test</div></pre></td></tr></table></figure></p><p>细节：在用Expression调用方法的时候，设置的Breakpoint是不会被主动触发的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 不会被触发</div><div class="line">(lldb) expression -l swift -O -- $R0.viewDidLoad()</div><div class="line"># 会被触发</div><div class="line">(lldb) expression -l swift -O -i 0 -- $R0.viewDidLoad()</div></pre></td></tr></table></figure></p><h3 id="Thread-Frame-amp-Step"><a href="#Thread-Frame-amp-Step" class="headerlink" title="Thread, Frame &amp; Step"></a>Thread, Frame &amp; Step</h3><ul><li><p>Thread &amp; Frame</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> # 打印当前栈内情况</div><div class="line">(lldb) thread backtrace</div><div class="line"> # 打印栈顶信息</div><div class="line">(lldb) frame info</div><div class="line">frame #0: 0x00000001075d0ae0 Signals`MasterViewController.viewWillAppear(animated=&lt;invalid&gt; (0xd1),self=0x00007fff5862dac0) -&gt; () at MasterViewController.swift:47</div><div class="line"> # 根据数据选择栈</div><div class="line"> (lldb) frame select 1</div><div class="line"> # 打印当前所在栈块内的实例</div><div class="line"> (lldb) frame variable</div><div class="line"> # 打印self 符号的所有实例</div><div class="line"> (lldb) frame variable -F self</div></pre></td></tr></table></figure></li><li><p>Step</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 重新启动程序</div><div class="line">(lldb) run</div><div class="line"># 继续</div><div class="line">(lldb) continue</div><div class="line"># 断点下一步 step over</div><div class="line">(lldb) next</div><div class="line"># 进入函数下一步 step into</div><div class="line">(lldb) step</div><div class="line"># 跳出当前函数 step out</div><div class="line">(lldb) finish</div></pre></td></tr></table></figure></li></ul><h3 id="TypeFormat"><a href="#TypeFormat" class="headerlink" title="TypeFormat"></a>TypeFormat</h3><p><a href="https://sourceware.org/gdb/ onlinedocs/gdb/Output-Formats.html" target="_blank" rel="noopener">参考链接</a></p><h3 id="Customizing-Commands"><a href="#Customizing-Commands" class="headerlink" title="Customizing Commands"></a>Customizing Commands</h3><ol><li>LLDB支持自定义命令行操作 (著名的chisel就是使用这种方法进行编写的)。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"># 这个命令相比大家都不陌生，是用来打印当前的视图结构的</div><div class="line">(lldb) po [[[[[UIApplication sharedApplication] keyWindow] rootViewController] view] recursiveDescription]</div><div class="line"></div><div class="line"># 自定义命令(运行时替换)</div><div class="line"># Note：如果想全局替换可以把这个写入~/.lldbinit里面即可</div><div class="line">(lldb) command alias -- Yay_Autolayout expression -l objc -O -- [[[[[UIApplication sharedApplication] keyWindow] rootViewController] view] recursiveDescription]</div><div class="line"></div><div class="line"># 下面的调用等价于第一个</div><div class="line">(lldb) Yay_Autolayout</div></pre></td></tr></table></figure></li></ol><h3 id="正则表达"><a href="#正则表达" class="headerlink" title="正则表达"></a>正则表达</h3><ul><li>LLDB的正则实现原理是基于Shell的SED命令，详细可以参考sed命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(lldb) command regex rlook &apos;s/(.+)/image lookup -rn %1/&apos;</div><div class="line">(lldb) rlook viewDidLoad</div></pre></td></tr></table></figure></li></ul><h3 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h3><p>c = continue<br>ex = expression<br>b = breakpoint<br>n = next</p><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><ul><li>$ ttys //查找当前终端的名称<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">~ $ tty</div><div class="line">&gt;&gt;  /dev/ttys027</div></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文为&lt;a href=&quot;https://store.raywenderlich.com/products/advanced-apple-debugging-and-reverse-engineering&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Advanced Apple Debugging &amp;amp; Reverse Engineering&lt;/a&gt;的第一章阅读笔记，&lt;br&gt;有不正之处望指正&lt;/p&gt;
&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;p&gt;关闭Rootless模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重启电脑，启动后长按Commond+R&lt;/li&gt;
&lt;li&gt;进入控制台&lt;/li&gt;
&lt;li&gt;输入 csrutil disable; reboot&lt;/li&gt;
&lt;li&gt;不久后就会重启电脑&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;File&quot;&gt;&lt;a href=&quot;#File&quot; class=&quot;headerlink&quot; title=&quot;File&quot;&gt;&lt;/a&gt;File&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ lldb /Projects/Sketch/build/Debug/Sketch.app &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&amp;gt; Current executable set to &amp;apos;/Projects/Sketch/build/Debug/Sketch.app&amp;apos; (x86_64)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;等同于&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ lldb &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(lldb) file /Projects/Sketch/build/Debug/Sketch.app &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;gt;&amp;gt; Current executable set to &amp;apos;/Projects/Sketch/build/Debug/Sketch.app&amp;apos; (x86_64).&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="LLDB" scheme="http://www.zhz.io/tags/LLDB/"/>
    
  </entry>
  
  <entry>
    <title>Block 的为什么会有循环引用</title>
    <link href="http://www.zhz.io/2017/03/15/Block-%E7%9A%84%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BC%9A%E6%9C%89%E5%BE%AA%E7%8E%AF%E5%BC%95%E7%94%A8/"/>
    <id>http://www.zhz.io/2017/03/15/Block-的为什么会有循环引用/</id>
    <published>2017-03-15T02:52:13.000Z</published>
    <updated>2018-02-12T02:53:13.793Z</updated>
    
    <content type="html"><![CDATA[<h2 id="这次分享要解决的问题"><a href="#这次分享要解决的问题" class="headerlink" title="这次分享要解决的问题"></a>这次分享要解决的问题</h2><p>Block 为什么会引起循环引用</p><h2 id="本次实验"><a href="#本次实验" class="headerlink" title="本次实验"></a>本次实验</h2><ul><li>平台信息</li><li>Apple LLVM version 8.0.0 (clang-800.0.42.1)</li><li>Target: x86_64-apple-darwin16.4.0</li><li>Thread model: posix</li><li>InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin</li><li>MRC</li></ul><a id="more"></a><h2 id="为什么会出现循环引用"><a href="#为什么会出现循环引用" class="headerlink" title="为什么会出现循环引用"></a>为什么会出现循环引用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">     +-----------+           +-----------+</div><div class="line">     | instance  |           |   Block   |</div><div class="line">---&gt; |           | --------&gt; |           |</div><div class="line">     | retain 2  | &lt;-------- | retain 1  |</div><div class="line">     |           |           |           |</div><div class="line">     +-----------+           +-----------+</div></pre></td></tr></table></figure><p>如上图所示。两个实例相互持有。<br>1.如果要释放instance，那么要先释放Block。<br>2.如果要释放block，那么要先释放instance。<br>条件1和2不能够同时满足，那么两个都不会被进行释放，这就是所谓的循环引用。</p><h2 id="Block的实现"><a href="#Block的实现" class="headerlink" title="Block的实现"></a>Block的实现</h2><p>工具Clang（GCC的替代品）,编译源码生成可执行文件。<br><em>–rewrite-objc</em>将OC的.m文件转换为cpp文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clang -rewrite-objc Test.m</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">int main(int argc, const char * argv[]) &#123;</div><div class="line">    @autoreleasepool &#123;</div><div class="line">        // insert code here...</div><div class="line">        NSLog(@&quot;Hello, World!&quot;);</div><div class="line">        ^&#123;</div><div class="line">            NSLog(@&quot;Hello Block&quot;);</div><div class="line">        &#125;();</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>利用Clang命令对源码进行重写。提取关键代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">struct __block_impl &#123;</div><div class="line">  void *isa;</div><div class="line">  int Flags;</div><div class="line">  int Reserved;</div><div class="line">  void *FuncPtr;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">struct __main_block_impl_0 &#123;</div><div class="line">  struct __block_impl impl;</div><div class="line">  struct __main_block_desc_0* Desc;</div><div class="line">  __main_block_impl_0(void *fp, struct __main_block_desc_0 *desc, int flags=0) &#123;</div><div class="line">    impl.isa = &amp;_NSConcreteStackBlock;</div><div class="line">    impl.Flags = flags;</div><div class="line">    impl.FuncPtr = fp;</div><div class="line">    Desc = desc;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">static void __main_block_func_0(struct __main_block_impl_0 *__cself) &#123;</div><div class="line">    NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_dz_d6n3371d4951v8wz6yx9tbwc0000gn_T_main_cd25fe_mi_1);</div><div class="line">&#125;</div><div class="line"></div><div class="line">static struct __main_block_desc_0 &#123;</div><div class="line">  size_t reserved;</div><div class="line">  size_t Block_size;</div><div class="line">&#125; __main_block_desc_0_DATA = &#123; 0, sizeof(struct __main_block_impl_0)&#125;;</div><div class="line"></div><div class="line"></div><div class="line">((void (*)())&amp;__main_block_impl_0((void *)__main_block_func_0, &amp;__main_block_desc_0_DATA))();</div></pre></td></tr></table></figure></p><p>从中我们可以得到些什么关键的数据<br>一个基础block结构体<strong>_block_imp</strong><br>一个静态C函数<strong>_main_block_func_0</strong>（命名方式：当前类的函数名+block+func+当前Block在文件中Block的序列号。）<br>一个block的结构体<strong>_main_block_impl_0</strong>(命名方式：当前类的函数名+block+impl+当前Block在文件中Block的序列号。)<br>一个block的解释体<strong>main_block_desc_0</strong>(命名方式：当前类的函数名+desc+impl+当前Block在文件中Block的序列号。)</p><p>简化得到基础的Block结构体模型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">struct Block_literal_1 &#123;</div><div class="line">    void *isa;//ARC:__NSMallocBlock__/__NSGlobalBlock__ MRC:__NSMallocBlock__/__NSStackBlock__/__NSGlobalBlock__</div><div class="line">    int flags;//copy到堆时候用的标识</div><div class="line">    int reserved;//保留变量</div><div class="line">    void (*invoke)(void *, ...);//函数指针，实际Block的函数调用地址，类似于实例方法的IMP</div><div class="line">    struct Block_descriptor_1 *descriptor;//Block描述信息</div><div class="line">&#125;;</div><div class="line">//非本节关注点。有兴趣自由研究。</div><div class="line">struct Block_descriptor_1 &#123;</div><div class="line">    unsigned long int reserved;//保留变量</div><div class="line">    unsigned long int size;//Block在内存中的大小</div><div class="line">    void (*copy)(void *dst, void *src);//copy到堆上使用的方法</div><div class="line">    void (*dispose)(void *);//执行Release操作</div><div class="line">    const char *signature;//函数签名</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><ul><li><strong>NSMallocBlock</strong>:堆区</li><li><strong>NSStackBlock</strong> :栈区</li><li><strong>NSGlobalBlock</strong>:Data/Text区</li></ul><h2 id="Block参数自动捕获机制"><a href="#Block参数自动捕获机制" class="headerlink" title="Block参数自动捕获机制"></a>Block参数自动捕获机制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">#import &lt;Foundation/Foundation.h&gt;</div><div class="line"></div><div class="line">int main(int argc, const char * argv[]) &#123;</div><div class="line">    @autoreleasepool &#123;</div><div class="line">        // insert code here...</div><div class="line">        NSLog(@&quot;Hello, World!&quot;);</div><div class="line">        NSString *a = nil;</div><div class="line">        ^&#123;</div><div class="line">            NSLog(@&quot;%@&quot;,a);</div><div class="line">            NSLog(@&quot;Hello Block&quot;);</div><div class="line">        &#125;();</div><div class="line">    &#125;</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>简化上述描述，最后得到结果Block为如下值，从中我们可以看到Block的结构体实例会持有a。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">struct Block_literal_1 &#123;</div><div class="line">    void *isa;</div><div class="line">    int flags;</div><div class="line">    int reserved;</div><div class="line">    void (*invoke)(void *, ...);</div><div class="line">    struct Block_descriptor_1 *descriptor;</div><div class="line">    </div><div class="line">    NSString *a;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>看完了C的这些实现我们来看OC的代码,测试代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@interface Test ()</div><div class="line">@property (nonatomic, strong) NSString *a;</div><div class="line">@end</div><div class="line"></div><div class="line">@implementation Test</div><div class="line">- (void)test&#123;</div><div class="line">    ^&#123;</div><div class="line">        NSLog(@&quot;%@&quot;,self.a);</div><div class="line">        NSLog(@&quot;Hello Block&quot;);</div><div class="line">    &#125;();</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure></p><p>简化得到Block如下,从中我们看到其实Block是持有self的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">struct Block_literal_1 &#123;</div><div class="line">    void *isa;</div><div class="line">    int flags;</div><div class="line">    int reserved;</div><div class="line">    void (*invoke)(void *, ...);</div><div class="line">    struct Block_descriptor_1 *descriptor;</div><div class="line">    </div><div class="line">    Test *self;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><p>所以Block是通过持有self实例来调用a的成员变量<br>简化版调用a成员变量的实现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">static void __Test__test_block_func_0(struct __Test__test_block_impl_0 *__cself) &#123;</div><div class="line">  Test *self = __cself-&gt;self; // bound by copy</div><div class="line">        NSLog((NSString *)objc_msgSend)((id)self, sel_registerName(&quot;a&quot;));</div><div class="line">        NSLog((NSString *)&amp;__NSConstantStringImpl__var_folders_dz_d6n3371d4951v8wz6yx9tbwc0000gn_T_Test_92b943_mi_1);</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><h2 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h2><p>retain cycle问题的根源在于Block和obj可能会互相强引用，互相retain对方，这样就导致了retain cycle，最后这个Block和obj就变成了孤岛，谁也释放不了谁。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">ASIHTTPRequest *request = [ASIHTTPRequest requestWithURL:url];</div><div class="line">[request setCompletionBlock:^&#123;</div><div class="line">  NSString* string = [request responseString];</div><div class="line">&#125;];</div><div class="line"></div><div class="line">     +-----------+           +-----------+</div><div class="line">     | request   |           |   Block   |</div><div class="line">---&gt; |           | --------&gt; |           |</div><div class="line">     | retain 2  | &lt;-------- | retain 1  |</div><div class="line">     |           |           |           |</div><div class="line">     +-----------+           +-----------+</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> __block ASIHTTPRequest *request = [ASIHTTPRequest requestWithURL:url];</div><div class="line"> [request setCompletionBlock:^&#123;</div><div class="line">   NSString* string = [request responseString];</div><div class="line"> &#125;];</div><div class="line">     +-----------+           +-----------+</div><div class="line">     | request   |           |   Block   |</div><div class="line">----&gt;|           | --------&gt; |           |</div><div class="line">     | retain 1  | &lt; - - - - | retain 1  |</div><div class="line">     |           |   weak    |           |</div><div class="line">     +-----------+           +-----------+</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">ClassA* objA = [[[ClassA alloc] init] autorelease];</div><div class="line">objA.myBlock = ^&#123;</div><div class="line">  [self doSomething];</div><div class="line">&#125;;</div><div class="line">self.objA = objA;</div><div class="line"></div><div class="line">+-----------+           +-----------+           +-----------+</div><div class="line">|   self    |           |   objA    |           |   Block   |</div><div class="line">|           | --------&gt; |           | --------&gt; |           |</div><div class="line">| retain 2  |           | retain 1  |           | retain 1  |</div><div class="line">|           |           |           |           |           |</div><div class="line">+-----------+           +-----------+           +-----------+</div><div class="line">     ^                                                |</div><div class="line">     |                                                |</div><div class="line">     +------------------------------------------------+</div></pre></td></tr></table></figure><h2 id="扩展知识"><a href="#扩展知识" class="headerlink" title="扩展知识"></a>扩展知识</h2><p>__block和__weak实现原理（有兴趣的自行了解）<br>关键代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">struct __Block_byref_weakSelf_0 &#123;</div><div class="line">  void *__isa;</div><div class="line">__Block_byref_weakSelf_0 *__forwarding;</div><div class="line"> int __flags;</div><div class="line"> int __size;</div><div class="line"> void (*__Block_byref_id_object_copy)(void*, void*);</div><div class="line"> void (*__Block_byref_id_object_dispose)(void*);</div><div class="line"> typeof (self) weakSelf;</div><div class="line">&#125;;</div><div class="line">struct __Test__test_block_impl_0 &#123;</div><div class="line">  struct __block_impl impl;</div><div class="line">  struct __Test__test_block_desc_0* Desc;</div><div class="line">  __Block_byref_weakSelf_0 *weakSelf; // by ref</div><div class="line">  __Block_byref_string_1 *string; // by ref</div><div class="line">  __Test__test_block_impl_0(void *fp, struct __Test__test_block_desc_0 *desc, __Block_byref_weakSelf_0 *_weakSelf, __Block_byref_string_1 *_string, int flags=0) : weakSelf(_weakSelf-&gt;__forwarding), string(_string-&gt;__forwarding) &#123;</div><div class="line">    impl.isa = &amp;_NSConcreteStackBlock;</div><div class="line">    impl.Flags = flags;</div><div class="line">    impl.FuncPtr = fp;</div><div class="line">    Desc = desc;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">static void __Test__test_block_dispose_0(struct __Test__test_block_impl_0*src) &#123;_Block_object_dispose((void*)src-&gt;self, 3/*BLOCK_FIELD_IS_OBJECT*/);&#125;</div><div class="line">static void __Test__test_block_dispose_0(struct __Test__test_block_impl_0*src) &#123;_Block_object_dispose((void*)src-&gt;weakSelf, 8/*BLOCK_FIELD_IS_BYREF*/);&#125;</div></pre></td></tr></table></figure></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://clang.llvm.org/docs/Block-ABI-Apple.html" target="_blank" rel="noopener">LLVM 中 block 实现源码</a><br><a href="http://blog.devtang.com/2013/07/28/a-look-inside-blocks/" target="_blank" rel="noopener">谈Objective-C block的实现</a><br><a href="http://tanqisen.github.io/blog/2013/04/19/gcd-block-cycle-retain/" target="_blank" rel="noopener">文中实际使用举例</a><br><a href="https://github.com/deput/NSInvocation-Block/blob/master/NSInvocation%2BBlock.m" target="_blank" rel="noopener">NSInvocation&lt;-&gt;block</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;这次分享要解决的问题&quot;&gt;&lt;a href=&quot;#这次分享要解决的问题&quot; class=&quot;headerlink&quot; title=&quot;这次分享要解决的问题&quot;&gt;&lt;/a&gt;这次分享要解决的问题&lt;/h2&gt;&lt;p&gt;Block 为什么会引起循环引用&lt;/p&gt;
&lt;h2 id=&quot;本次实验&quot;&gt;&lt;a href=&quot;#本次实验&quot; class=&quot;headerlink&quot; title=&quot;本次实验&quot;&gt;&lt;/a&gt;本次实验&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;平台信息&lt;/li&gt;
&lt;li&gt;Apple LLVM version 8.0.0 (clang-800.0.42.1)&lt;/li&gt;
&lt;li&gt;Target: x86_64-apple-darwin16.4.0&lt;/li&gt;
&lt;li&gt;Thread model: posix&lt;/li&gt;
&lt;li&gt;InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin&lt;/li&gt;
&lt;li&gt;MRC&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>我的2016年总结</title>
    <link href="http://www.zhz.io/2016/12/31/%E6%88%91%E7%9A%842016%E5%B9%B4%E6%80%BB%E7%BB%93/"/>
    <id>http://www.zhz.io/2016/12/31/我的2016年总结/</id>
    <published>2016-12-31T04:44:36.000Z</published>
    <updated>2018-02-12T02:54:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>呵呵哒，这好像是我第一次写这种总结（非逼迫性），来记录一下今年我都干了写啥蠢事。<br>OK~2016年，就这样过去了，这几天看了几个小伙伴和一些人的博客，套用下模板吧。The Good The Bad</p><h2 id="0x01-The-Good"><a href="#0x01-The-Good" class="headerlink" title="0x01 The Good"></a>0x01 The Good</h2><p>今年顺利毕业了，算是度过了人生中最后一段学校的时光。<br>今年的变化还是挺多的吧，单从职业上来说，从学生变成了从业者。从生活上来说，从一个满受父母关怀的孩子变成了一个独立者。</p><h2 id="看了挺多的书"><a href="#看了挺多的书" class="headerlink" title="看了挺多的书"></a>看了挺多的书</h2><p>今年看了挺多的书吧，比如说CA、OC编程之道、Effective Objective-C、代码之外的生存指南等等。收益良多，了解了更多iOS底层的东西，对于后续帮助的确挺大的。<br><a id="more"></a></p><h2 id="从业务转向组件"><a href="#从业务转向组件" class="headerlink" title="从业务转向组件"></a>从业务转向组件</h2><p>来到了一家1K以上规模的公司，终于可以开始不用写一些业务上面的代码了，对于我来说，感觉业务的代码比较繁琐，因为平时的工作量比较多，所以想研究一些东西变成了不可能。<br>现在有所好转，可以开始重构一些模块，开始做一些模块化的东西，接触一些之前会接触不到的东西。慢慢的开始优化自己的代码，因为我写的并不是只有我一个人用，而是面向整个团队。</p><h2 id="提升工作效率的方法并不是加班"><a href="#提升工作效率的方法并不是加班" class="headerlink" title="提升工作效率的方法并不是加班"></a>提升工作效率的方法并不是加班</h2><p>有段时间，曾经强迫自己每天晚上一定要加班，把自己搞的累死累活的，重复着一样的工作。然而并没有什么很好的进展，工作完成量和时间成了一次性方程直线。<br>在做自动化静态库构建的时候，刚开始并没有完整的理解Ruby语言的魅力，导致自己走了很多的弯路，而且少了错过了很多更加有效的方案方法。</p><h2 id="当下能做的为什么要拖到明天"><a href="#当下能做的为什么要拖到明天" class="headerlink" title="当下能做的为什么要拖到明天"></a>当下能做的为什么要拖到明天</h2><p>这应该算一个方法的转变吧，我觉得我是一个很懒的人，所以一直都是这件事情明天做吧，那就放到明天好了。当时这个明天就永远变成了明天。这是我不愿意看到的，所以开始慢慢的调整自己的习惯。从小事做起吧，比如说，洗衣机的衣服洗好了，那就马上去晒掉，不丢到明天。</p><h2 id="1年-1年？"><a href="#1年-1年？" class="headerlink" title="1年=1年？"></a>1年=1年？</h2><p>在技术圈子里时不时就会听到这句话，“技术无时无刻都在变化，你永远都不知道下一秒变成了什么”。我听到了另外一句话，“你的一年是几年”，你是每天重复着一样的工作，还是说你无时无刻都在学习。</p><h2 id="0x02-The-Bad"><a href="#0x02-The-Bad" class="headerlink" title="0x02 The Bad"></a>0x02 The Bad</h2><h2 id="年初定下的一些目标并没有实现"><a href="#年初定下的一些目标并没有实现" class="headerlink" title="年初定下的一些目标并没有实现"></a>年初定下的一些目标并没有实现</h2><p>关于年初定了一堆的目标，被遗忘了好多了。呵呵哒。其中有个减肥的好像被遗忘的特别严重吧。去年狠下心减了那么多，今年弹了一部分。<br>改进：可能要实行一些GTD的方案，来规划一下后面走的路。</p><h2 id="认识的人太少了"><a href="#认识的人太少了" class="headerlink" title="认识的人太少了"></a>认识的人太少了</h2><p>不知道是不是因为工作了的关系，开始认识的人越来越少，自己的圈子被局限了起来。一些交流会感觉无意义就被略过了，或者已没时间为借口匆匆的避开了一系列聚会。和朋友之间呆的时间也开始变少了。或者说知心朋友应该是越来越少了吧。<br>改进：多参加一些技术交流会吧，即使不是技术的。</p><h2 id="其他领域的知识狩猎太少了"><a href="#其他领域的知识狩猎太少了" class="headerlink" title="其他领域的知识狩猎太少了"></a>其他领域的知识狩猎太少了</h2><p>今年一股脑门的投入在iOS圈子里面，对于其他的技术了解的太少了，还好最后一个月，在写一些脚本构建方面的东西，从而能够学习到一些Shell和Ruby。不然真的要被OC给玩死了，到头来一点意思都没有。几年都不加语言特性（呵呵哒）。<br>改进：应该会对一些其他领域进行研究，特别是安全方面的。</p><h2 id="重构上测试写太少了"><a href="#重构上测试写太少了" class="headerlink" title="重构上测试写太少了"></a>重构上测试写太少了</h2><p>最后几个月重构了一些东西，但是呢出了线上Bug，原因都很简单，都是几分钟内解决的小Bug，而且一些测试明显就能够测试出来。哎~只能说自己重构前没有写测试吧。导致自己犯了一些很低级的错误。<br>改进：以后重构的时候前写好单元测试和功能测试吧。</p><h2 id="0x03-2017-一些计划"><a href="#0x03-2017-一些计划" class="headerlink" title="0x03 2017 一些计划"></a>0x03 2017 一些计划</h2><ol><li>明确自己的人生目标（应该是阶段性的目标）</li><li>去一次日本</li><li>改变自己</li><li>能够从容的应对各种事情</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;呵呵哒，这好像是我第一次写这种总结（非逼迫性），来记录一下今年我都干了写啥蠢事。&lt;br&gt;OK~2016年，就这样过去了，这几天看了几个小伙伴和一些人的博客，套用下模板吧。The Good The Bad&lt;/p&gt;
&lt;h2 id=&quot;0x01-The-Good&quot;&gt;&lt;a href=&quot;#0x01-The-Good&quot; class=&quot;headerlink&quot; title=&quot;0x01 The Good&quot;&gt;&lt;/a&gt;0x01 The Good&lt;/h2&gt;&lt;p&gt;今年顺利毕业了，算是度过了人生中最后一段学校的时光。&lt;br&gt;今年的变化还是挺多的吧，单从职业上来说，从学生变成了从业者。从生活上来说，从一个满受父母关怀的孩子变成了一个独立者。&lt;/p&gt;
&lt;h2 id=&quot;看了挺多的书&quot;&gt;&lt;a href=&quot;#看了挺多的书&quot; class=&quot;headerlink&quot; title=&quot;看了挺多的书&quot;&gt;&lt;/a&gt;看了挺多的书&lt;/h2&gt;&lt;p&gt;今年看了挺多的书吧，比如说CA、OC编程之道、Effective Objective-C、代码之外的生存指南等等。收益良多，了解了更多iOS底层的东西，对于后续帮助的确挺大的。&lt;br&gt;
    
    </summary>
    
    
      <category term="总结" scheme="http://www.zhz.io/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Cocoapods常用命令</title>
    <link href="http://www.zhz.io/2016/12/15/Cocoapods%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.zhz.io/2016/12/15/Cocoapods常用命令/</id>
    <published>2016-12-15T08:57:23.000Z</published>
    <updated>2016-12-15T09:01:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-Pod基础"><a href="#0x00-Pod基础" class="headerlink" title="0x00 Pod基础"></a>0x00 Pod基础</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod --help 这个可以用来所有的命令</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ pod [Commond] [Options]</div><div class="line">$ pod install --verbose --no-repo-update</div></pre></td></tr></table></figure><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">文件目录</div><div class="line">which pod Pod组件安装的目录</div><div class="line"></div><div class="line">Find里面进入./cocoapods可以看到你本地所有的仓库</div></pre></td></tr></table></figure><p>Commonds<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod setup 重新安装master仓库，最好别用。因为会把master库删掉，然后下载又很慢，可以用Airdrop让别人给你传一份。</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pod install  </div><div class="line">官方说法:Install project dependencies according to versions from a Podfile.lock</div><div class="line">解释:解析.podfile文件，跟本地的podfile进行比对，并按不同之处重新进行依赖关系修复。</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">pod update </div><div class="line">官方说法:Update outdated project dependencies and create new Podfile.lock</div><div class="line">解释:解析.podfile文件，忽略本地的Podfile.lock文件，重新生成Podfile</div><div class="line"></div><div class="line">pod update Your_Project_Name</div><div class="line">解释:仅仅更新Name仓库</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pod search [name]</div><div class="line">官方说法:Search for pods</div><div class="line">解释:扫描本地的./cocoapods目录下所有的podspec。匹配含有name的项目</div></pre></td></tr></table></figure><p>Options </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">--verbose </div><div class="line">官方说法:Show more debugging information</div><div class="line">解释:显示出所有Debug信息</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">--no-repo-update</div><div class="line">解释:不去更新现有的本地仓库（包括master，和私有的）</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">--version 当前使用Cocoapods的版本</div></pre></td></tr></table></figure><p>###本地gems的程序安装包，可以看到Cocoapods一共安装了那些组件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gem list</div></pre></td></tr></table></figure></p><p>###找到对应的组件，可以移除安装包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo gem uninstall cocoapods -v 0.35.0</div></pre></td></tr></table></figure></p><p>###安装制定版本的安装包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo gem install cocoapods -v 0.34.4</div></pre></td></tr></table></figure></p><p>###查看本地的源路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gem sources -l</div></pre></td></tr></table></figure></p><p>###切换Gem Source<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">#淘宝的据说已经不维护了</div><div class="line">$ gem sources --add https://gems.ruby-china.org/ #添加源</div><div class="line">$ gem sources --remove https://rubygems.org/ #移除源</div></pre></td></tr></table></figure></p><h1 id="0x00-Pod进阶"><a href="#0x00-Pod进阶" class="headerlink" title="0x00 Pod进阶"></a>0x00 Pod进阶</h1><p>Commonds<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">pod cache </div><div class="line">官方解释:Manipulate the CocoaPods cache</div><div class="line">解释:本地的依赖库缓存，不是项目工程Pods下的缓存。</div><div class="line"></div><div class="line">pod cache list 显示所有的本地缓存</div><div class="line">pod cache clean Your_Project_Name --all 清除所有的Your_Project_Name在本地的缓存</div><div class="line">pod cache clean Your_Project_Name 会显示出所有的Your_Project_Name缓存，然后再根据你想要的去清除</div></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">pod repo 管理仓库的命令</div><div class="line">pod repo update 更新本地所有仓库</div><div class="line">pod repo update [Name] 仅仅更新Name仓库</div><div class="line">pod repo push [Name.podspec] [本地仓库名字] 推送一个私有项目的配置文件podspec 到制定的私有仓库</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod trunk 将项目配置推送到公共的master仓库</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pod outdated</div><div class="line">官方说法:Show outdated project dependencies</div><div class="line">解释:分析现有的依赖项，并与最新的比较。如图所示</div></pre></td></tr></table></figure><p>###运行不同版本的pod前提是你本地有不同版本的pod<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod _1.0.1_ install</div></pre></td></tr></table></figure></p><h1 id="0x00-Pod插件"><a href="#0x00-Pod插件" class="headerlink" title="0x00 Pod插件"></a>0x00 Pod插件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gem install cocoapods-package 安装用来打包成静态库的插件</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod package [Name.podspec] [Options]</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">--force 替换本地已有的文件</div><div class="line">--no-mangle 接触Pod中已有的依赖冠以</div><div class="line">--library 打包成.a静态库</div><div class="line">--exclude-deps 不把依赖项打包进入项目</div><div class="line">--spec-sources=private,https://github.com/CocoaPods/Specs.git 如果项目中有私有源一定要加上这个</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-Pod基础&quot;&gt;&lt;a href=&quot;#0x00-Pod基础&quot; class=&quot;headerlink&quot; title=&quot;0x00 Pod基础&quot;&gt;&lt;/a&gt;0x00 Pod基础&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;pod --help 这个可以用来所有的命令&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ pod [Commond] [Options]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ pod install --verbose --no-repo-update&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Cocoapods" scheme="http://www.zhz.io/tags/Cocoapods/"/>
    
  </entry>
  
  <entry>
    <title>Share Keychain Access</title>
    <link href="http://www.zhz.io/2016/08/25/Shared%20Keychain%20Access/"/>
    <id>http://www.zhz.io/2016/08/25/Shared Keychain Access/</id>
    <published>2016-08-25T08:57:23.000Z</published>
    <updated>2016-12-15T10:04:43.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-什么是Keychain"><a href="#0x00-什么是Keychain" class="headerlink" title="0x00 什么是Keychain"></a>0x00 什么是Keychain</h2><p>据介绍，Keychain是iOS系统官方提供的安全存储容器，我们可以用它来存一些敏感信息，EG:密码，用户名，证书等等。<br>Mac电脑上自带的Keychain Access.app就是苹果自己的Keychain读取软件。<br>Keychain是保存在沙盒之外的数据库的，所以在删除App后，在重新下载App后，这些信息依旧存在，并且你可以通过设置一些属性，让你的数据保#####存到iCloud中，达到跨设备存储。</p><h2 id="0x01-Keychain本质是什么"><a href="#0x01-Keychain本质是什么" class="headerlink" title="0x01 Keychain本质是什么"></a>0x01 Keychain本质是什么</h2><p>Keychain存储本质是Sqlite。真机地址：/private/var/Keychains/keychain-2.db<br>既然是Sqlite，那么Keychain存储的对象（后面统称为Item），即对应Sqlite上的一条记录而已。</p><a id="more"></a><h2 id="0x02-Item"><a href="#0x02-Item" class="headerlink" title="0x02 Item"></a>0x02 Item</h2><p>Item 结构</p><ul><li>Class -&gt; kSecClass //指向对应的表结构</li><li>Attributes -&gt; kSecAttrXXXX //每个表中对应的字段</li><li>Value -&gt; kSecValueXXX //存储的类型</li></ul><p>Class<br>有Sqlite，那么就会有对应的表。<br>Item在保存对象的时候，你需要指定你要保存的表。</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="built_in">CFStringRef</span> kSecClassGenericPassword     <span class="comment">//一般的密码存储表，基本用这个为主，对应genp表</span></div><div class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="built_in">CFStringRef</span> kSecClassInternetPassword      <span class="comment">//用来存储网络密码的表，对应inet表</span></div><div class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="built_in">CFStringRef</span> kSecClassCertificate           <span class="comment">//用来存储证书表，对应cert表</span></div><div class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="built_in">CFStringRef</span> kSecClassKey                     <span class="comment">//存一些Key之类的东西，对应keys表</span></div><div class="line"><span class="keyword">extern</span> <span class="keyword">const</span> <span class="built_in">CFStringRef</span> kSecClassIdentity                  <span class="comment">//一些特殊的认证信息之类的，这个不知道。</span></div></pre></td></tr></table></figure><p>Attributes<br>关于Item的属性，对应的不同表是不同的。每个都介绍不现实，讲讲最常用的kSecClassGenericPassword表中的一些字段吧</p><table><thead><tr><th>属性</th><th>Value值</th><th>作用</th></tr></thead><tbody><tr><td>kSecAttrAccessible</td><td>kSecAttrAccessibleWhenUnlocked （Default）</td><td>你能获取到Keychain的数据必须在设备被解锁的情况下获取</td></tr><tr><td></td><td>kSecAttrAccessibleAfterFirstUnlock</td><td>Keychain的数据在设备第一次解锁之后就能够获取使用</td></tr><tr><td></td><td>kSecAttrAccessibleAlways</td><td>Keychain数据始终可以获取到</td></tr><tr><td>kSecAttrAccessGroup</td><td>自定义Like（@”AppIdentifierPrefix.com.hongzhi.test”）</td><td>设置你的存储区域，后面会详细讲</td></tr><tr><td>kSecAttrAccount</td><td>自定义</td><td>标识此条数据的主Key之一</td></tr><tr><td>kSecAttrService</td><td>自定义</td><td>标识此条数据的主Key之一</td></tr><tr><td>kSecAttrGeneric</td><td>自定义</td><td>非主键用来标识</td></tr><tr><td>kSecAttrSynchronizable</td><td>BOOL</td><td>标识是否同步到iCloud</td></tr></tbody></table><blockquote><p>Note:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;kSecAttrAccessible还有另外三种是在上面这几个后面加ThisDeviceOnly，则数据不会跟随设备移动，会跟设备绑定。<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AppIdentifierPrefix是你开发证书的唯一标识符号，com.hongzhi.test是你应用的BundleId。</p></blockquote><p>Value</p><table><thead><tr><th>属性</th><th>Value值</th><th>作用</th></tr></thead><tbody><tr><td>kSecValueData</td><td>Get或者Set</td><td>这个就是你要存数据的Value，只能存NSData对象</td></tr></tbody></table><h2 id="0x03-用法"><a href="#0x03-用法" class="headerlink" title="0x03 用法"></a>0x03 用法</h2><p>既然是Sqlite数据库的存储，那么肯定就有增删该查。<br>每个函数都会有一个OSStatus的标识，标识操作是否成功,更多的标识参考SecBase.h文件中的OSStatus枚举值。</p><ol><li>SecItemAdd 添加一个keychain item</li><li>SecItemUpdate 修改一个keychain item</li><li>SecItemCopyMatching 搜索一个keychain item</li><li>SecItemDelete 删除一个keychain item</li></ol><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSMutableDictionary</span> *)newSearchDictionary:(<span class="built_in">NSString</span> *)identifier &#123;</div><div class="line">    <span class="built_in">NSMutableDictionary</span> *searchDictionary = [[<span class="built_in">NSMutableDictionary</span> alloc] init];</div><div class="line">    <span class="comment">//指定item的类型为GenericPassword</span></div><div class="line">    [searchDictionary setObject:(<span class="keyword">id</span>)kSecClassGenericPassword forKey:(<span class="keyword">id</span>)kSecClass];</div><div class="line">    </div><div class="line">    <span class="comment">//类型为GenericPassword的信息必须提供以下两条属性作为unique identifier</span></div><div class="line">    [searchDictionary setObject:encodedIdentifier forKey:(<span class="keyword">id</span>)kSecAttrAccount]；</div><div class="line">    [searchDictionary setObject:encodedIdentifier forKey:(<span class="keyword">id</span>)kSecAttrService]；</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> searchDictionary;</div><div class="line">&#125;</div><div class="line">- (<span class="built_in">NSData</span> *)searchKeychainCopyMatching:(<span class="built_in">NSString</span> *)identifier &#123;</div><div class="line">    <span class="built_in">NSMutableDictionary</span> *searchDictionary = [<span class="keyword">self</span> newSearchDictionary:identifier];</div><div class="line">    </div><div class="line">    <span class="comment">//在搜索keychain item的时候必须提供下面的两条用于搜索的属性</span></div><div class="line">    <span class="comment">//只返回搜索到的第一条item</span></div><div class="line">    [searchDictionary setObject:(<span class="keyword">id</span>)kSecMatchLimitOne forKey:(<span class="keyword">id</span>)kSecMatchLimit];</div><div class="line">    <span class="comment">//返回item的kSecValueData</span></div><div class="line">    [searchDictionary setObject:(<span class="keyword">id</span>)kCFBooleanTrue forKey:(<span class="keyword">id</span>)kSecReturnData];</div><div class="line">    </div><div class="line">    <span class="built_in">NSData</span> *result = <span class="literal">nil</span>;</div><div class="line">    OSStatus status = SecItemCopyMatching((<span class="built_in">CFDictionaryRef</span>)searchDictionary,</div><div class="line">                                          (<span class="built_in">CFTypeRef</span> *)&amp;result);</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div><div class="line">- (<span class="built_in">BOOL</span>)createKeychainValue:(<span class="built_in">NSString</span> *)password forIdentifier:(<span class="built_in">NSString</span> *)identifier &#123;</div><div class="line">    <span class="comment">//设置添加的字典</span></div><div class="line">    <span class="built_in">NSMutableDictionary</span> *dictionary = [<span class="keyword">self</span> newSearchDictionary:identifier];</div><div class="line">    </div><div class="line">    <span class="built_in">NSData</span> *passwordData = [password dataUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</div><div class="line">    [dictionary setObject:passwordData forKey:(<span class="keyword">id</span>)kSecValueData];</div><div class="line">    </div><div class="line">    OSStatus status = SecItemAdd((<span class="built_in">CFDictionaryRef</span>)dictionary, <span class="literal">NULL</span>);</div><div class="line">    <span class="keyword">if</span> (status == errSecSuccess) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">&#125;</div><div class="line">- (<span class="built_in">BOOL</span>)updateKeychainValue:(<span class="built_in">NSString</span> *)password forIdentifier:(<span class="built_in">NSString</span> *)identifier &#123;</div><div class="line">    <span class="built_in">NSMutableDictionary</span> *searchDictionary = [<span class="keyword">self</span> newSearchDictionary:identifier];</div><div class="line">    </div><div class="line">    <span class="built_in">NSMutableDictionary</span> *updateDictionary = [[<span class="built_in">NSMutableDictionary</span> alloc] init];</div><div class="line">    <span class="built_in">NSData</span> *passwordData = [password dataUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</div><div class="line">    [updateDictionary setObject:passwordData forKey:(<span class="keyword">id</span>)kSecValueData];</div><div class="line">    </div><div class="line">    OSStatus status = SecItemUpdate((<span class="built_in">CFDictionaryRef</span>)searchDictionary,</div><div class="line">                                    (<span class="built_in">CFDictionaryRef</span>)updateDictionary);</div><div class="line">    <span class="keyword">if</span> (status == errSecSuccess) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)deleteKeychainValue:(<span class="built_in">NSString</span> *)identifier &#123;</div><div class="line">    <span class="built_in">NSMutableDictionary</span> *searchDictionary = [<span class="keyword">self</span> newSearchDictionary:identifier];</div><div class="line">    SecItemDelete((<span class="built_in">CFDictionaryRef</span>)searchDictionary);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="0x04-关于iCloud备份"><a href="#0x04-关于iCloud备份" class="headerlink" title="0x04 关于iCloud备份"></a>0x04 关于iCloud备份</h2><ol><li>使用kSecAttrSynchronizable可以对存储的值进行跨设备的备份，但是添加这个字段后，搜索会以这个值作为主要的Key。</li><li>搜索匹配的时候要带上这个字段才能查询到相应的Item。</li></ol><h2 id="0x05-App间共享数据"><a href="#0x05-App间共享数据" class="headerlink" title="0x05 App间共享数据"></a>0x05 App间共享数据</h2><ol><li>关键东西：Keychain access group。</li><li>原理：Keychain通过Provisioning profile来区分应用，每个profile会带有相应的bundle id和添加的Access Group，应用保存的数据指定在对应的Access group中，如果没有在属性中设置，即存储在已bundle id命名的Access Group中。</li><li>非代码指定Access Group的话，就要在Capabilities中打开Keychain Sharing，在其中添加相应的BundleId，系统会自动帮你添加AppIdentifierPrefix，即Id值。<br>Use:<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[searchDictionary setObject:@“AppIdentifierPrefix.UC.testWriteKeychainSuit” forKey:(<span class="keyword">id</span>)kSecAttrAccessGroup];</div></pre></td></tr></table></figure></li></ol><blockquote><p>如果多个App指定了同一个Access group，并且它是由同一个证书下发的，那么这两个App就能够从这个Access Group中获取数据。</p></blockquote><h2 id="0xfe-总结"><a href="#0xfe-总结" class="headerlink" title="0xfe 总结"></a>0xfe 总结</h2><p>Keychain很方便，支持App间，设备间数据的传输，为一大群开发者解决了一堆的难题，但是也不能过度依赖于这个东西。Keychain的读取速度是NSUserDefault的3倍时长左右。一些简单的数据存储在Info.plist或者NSUserdefault中反而会更好。</p><h2 id="0xff-参考链接"><a href="#0xff-参考链接" class="headerlink" title="0xff 参考链接"></a>0xff 参考链接</h2><p><a href="https://developer.apple.com/videos/play/wwdc2013/709/" target="_blank" rel="noopener">2013届WWDC Keychain简介</a><br><a href="http://blog.sheliw.com/blog/2015/02/16/keychain/" target="_blank" rel="noopener">Max Blog Keychain</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-什么是Keychain&quot;&gt;&lt;a href=&quot;#0x00-什么是Keychain&quot; class=&quot;headerlink&quot; title=&quot;0x00 什么是Keychain&quot;&gt;&lt;/a&gt;0x00 什么是Keychain&lt;/h2&gt;&lt;p&gt;据介绍，Keychain是iOS系统官方提供的安全存储容器，我们可以用它来存一些敏感信息，EG:密码，用户名，证书等等。&lt;br&gt;Mac电脑上自带的Keychain Access.app就是苹果自己的Keychain读取软件。&lt;br&gt;Keychain是保存在沙盒之外的数据库的，所以在删除App后，在重新下载App后，这些信息依旧存在，并且你可以通过设置一些属性，让你的数据保#####存到iCloud中，达到跨设备存储。&lt;/p&gt;
&lt;h2 id=&quot;0x01-Keychain本质是什么&quot;&gt;&lt;a href=&quot;#0x01-Keychain本质是什么&quot; class=&quot;headerlink&quot; title=&quot;0x01 Keychain本质是什么&quot;&gt;&lt;/a&gt;0x01 Keychain本质是什么&lt;/h2&gt;&lt;p&gt;Keychain存储本质是Sqlite。真机地址：/private/var/Keychains/keychain-2.db&lt;br&gt;既然是Sqlite，那么Keychain存储的对象（后面统称为Item），即对应Sqlite上的一条记录而已。&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS" scheme="http://www.zhz.io/tags/iOS/"/>
    
  </entry>
  
</feed>
